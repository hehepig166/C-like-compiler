================= statements ==================
                <_>   ::=   <program>
         <assignop>   ::=   =
         <assignop>   ::=   *=
         <assignop>   ::=   /=
         <assignop>   ::=   +=
         <assignop>   ::=   -=
            <relop>   ::=   <
            <relop>   ::=   >
            <relop>   ::=   ==
            <relop>   ::=   !=
            <relop>   ::=   >=
            <relop>   ::=   <=
            <sumop>   ::=   +
            <sumop>   ::=   -
            <mulop>   ::=   *
            <mulop>   ::=   /
            <mulop>   ::=   %
          <unaryop>   ::=   -
          <unaryop>   ::=   *
          <program>   ::=   <declList>
         <declList>   ::=   <declList> <decl>
         <declList>   ::=   <decl>
             <decl>   ::=   <varDecl>
             <decl>   ::=   <funDecl>
         <typeSpec>   ::=   bool
         <typeSpec>   ::=   char
         <typeSpec>   ::=   int
          <varDecl>   ::=   <typeSpec> <varDeclList> ;
    <scopedVarDecl>   ::=   <typeSpec> <varDeclList> ;
      <varDeclList>   ::=   <varDeclList> , <varDeclInit>
      <varDeclList>   ::=   <varDeclInit>
      <varDeclInit>   ::=   <varDeclId>
      <varDeclInit>   ::=   <varDeclId> = <simpleExp>
        <varDeclId>   ::=   ID
        <varDeclId>   ::=   ID [ NUMCONST ]
          <funDecl>   ::=   <typeSpec> ID ( <parms> ) <compoundStmt>
            <parms>   ::=   <parmList>
            <parms>   ::=  
         <parmList>   ::=   <parmList> ; <parmTypeList>
         <parmList>   ::=   <parmTypeList>
     <parmTypeList>   ::=   <typeSpec> <parmIdList>
       <parmIdList>   ::=   <parmIdList> , <parmId>
       <parmIdList>   ::=   <parmId>
           <parmId>   ::=   ID
           <parmId>   ::=   ID [ ]
         <stmtList>   ::=   <stmtList> <stmt>
         <stmtList>   ::=  
             <stmt>   ::=   <expStmt>
             <stmt>   ::=   <compoundStmt>
             <stmt>   ::=   <selectStmt>
             <stmt>   ::=   <iterStmt>
             <stmt>   ::=   <returnStmt>
             <stmt>   ::=   <breakStmt>
          <expStmt>   ::=   <exp> ;
          <expStmt>   ::=   ;
     <compoundStmt>   ::=   { <localDecls> <stmtList> }
       <localDecls>   ::=   <localDecls> <scopedVarDecl>
       <localDecls>   ::=  
       <selectStmt>   ::=   if ( <simpleExp> ) then <stmt>
       <selectStmt>   ::=   if ( <simpleExp> ) then <stmt> else <stmt>
         <iterStmt>   ::=   while ( <simpleExp> ) <stmt>
       <returnStmt>   ::=   return ;
       <returnStmt>   ::=   return <exp> ;
        <breakStmt>   ::=   break ;
              <exp>   ::=   <mutable> <assignop> <exp>
              <exp>   ::=   <simpleExp>
        <simpleExp>   ::=   <simpleExp> or <andExp>
        <simpleExp>   ::=   <andExp>
           <andExp>   ::=   <andExp> and <unaryRelExp>
           <andExp>   ::=   <unaryRelExp>
      <unaryRelExp>   ::=   not <unaryRelExp>
      <unaryRelExp>   ::=   <relExp>
           <relExp>   ::=   <sumExp> <relop> <sumExp>
           <relExp>   ::=   <sumExp>
           <sumExp>   ::=   <sumExp> <sumop> <mulExp>
           <sumExp>   ::=   <mulExp>
           <mulExp>   ::=   <mulExp> <mulop> <unaryExp>
           <mulExp>   ::=   <unaryExp>
         <unaryExp>   ::=   <unaryop> <unaryExp>
         <unaryExp>   ::=   <factor>
           <factor>   ::=   <mutable>
           <factor>   ::=   <immutable>
          <mutable>   ::=   ID
          <mutable>   ::=   ID [ <exp> ]
        <immutable>   ::=   ( <exp> )
        <immutable>   ::=   <call>
        <immutable>   ::=   <constant>
             <call>   ::=   ID ( <args> )
             <args>   ::=   <argList>
             <args>   ::=  
          <argList>   ::=   <argList> , <exp>
          <argList>   ::=   <exp>
         <constant>   ::=   NUMCONST
         <constant>   ::=   CHARCONST
         <constant>   ::=   STRINGCONST
         <constant>   ::=   true
         <constant>   ::=   false

=================== FIRST =====================
                <_>   ->    bool char int
           <andExp>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false not true
          <argList>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false not true
             <args>   ->    ( * - CHARCONST EMPTY ID NUMCONST STRINGCONST false not true
         <assignop>   ->    *= += -= /= =
        <breakStmt>   ->    break
             <call>   ->    ID
     <compoundStmt>   ->    {
         <constant>   ->    CHARCONST NUMCONST STRINGCONST false true
             <decl>   ->    bool char int
         <declList>   ->    bool char int
              <exp>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false not true
          <expStmt>   ->    ( * - ; CHARCONST ID NUMCONST STRINGCONST false not true
           <factor>   ->    ( CHARCONST ID NUMCONST STRINGCONST false true
          <funDecl>   ->    bool char int
        <immutable>   ->    ( CHARCONST ID NUMCONST STRINGCONST false true
         <iterStmt>   ->    while
       <localDecls>   ->    EMPTY bool char int
           <mulExp>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false true
            <mulop>   ->    % * /
          <mutable>   ->    ID
           <parmId>   ->    ID
       <parmIdList>   ->    ID
         <parmList>   ->    bool char int
     <parmTypeList>   ->    bool char int
            <parms>   ->    EMPTY bool char int
          <program>   ->    bool char int
           <relExp>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false true
            <relop>   ->    != < <= == > >=
       <returnStmt>   ->    return
    <scopedVarDecl>   ->    bool char int
       <selectStmt>   ->    if
        <simpleExp>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false not true
             <stmt>   ->    ( * - ; CHARCONST ID NUMCONST STRINGCONST break false if not return true while {
         <stmtList>   ->    ( * - ; CHARCONST EMPTY ID NUMCONST STRINGCONST break false if not return true while {
           <sumExp>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false true
            <sumop>   ->    + -
         <typeSpec>   ->    bool char int
         <unaryExp>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false true
      <unaryRelExp>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false not true
          <unaryop>   ->    * -
          <varDecl>   ->    bool char int
        <varDeclId>   ->    ID
      <varDeclInit>   ->    ID
      <varDeclList>   ->    ID

=================== FOLLOW ====================
                <_>   ->    $
           <andExp>   ->    ) , ; ] and or
          <argList>   ->    ) ,
             <args>   ->    )
         <assignop>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false not true
        <breakStmt>   ->    ( * - ; CHARCONST ID NUMCONST STRINGCONST break else false if not return true while { }
             <call>   ->    != % ) * + , - / ; < <= == > >= ] and or
     <compoundStmt>   ->    $ ( * - ; CHARCONST ID NUMCONST STRINGCONST bool break char else false if int not return true while { }
         <constant>   ->    != % ) * + , - / ; < <= == > >= ] and or
             <decl>   ->    $ bool char int
         <declList>   ->    $ bool char int
              <exp>   ->    ) , ; ]
          <expStmt>   ->    ( * - ; CHARCONST ID NUMCONST STRINGCONST break else false if not return true while { }
           <factor>   ->    != % ) * + , - / ; < <= == > >= ] and or
          <funDecl>   ->    $ bool char int
        <immutable>   ->    != % ) * + , - / ; < <= == > >= ] and or
         <iterStmt>   ->    ( * - ; CHARCONST ID NUMCONST STRINGCONST break else false if not return true while { }
       <localDecls>   ->    $ ( * - ; CHARCONST ID NUMCONST STRINGCONST bool break char else false if int not return true while { }
           <mulExp>   ->    != % ) * + , - / ; < <= == > >= ] and or
            <mulop>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false true
          <mutable>   ->    != % ) * *= + += , - -= / /= ; < <= = == > >= ] and or
           <parmId>   ->    ) , ;
       <parmIdList>   ->    ) , ;
         <parmList>   ->    ) ;
     <parmTypeList>   ->    ) ;
            <parms>   ->    )
          <program>   ->    $
           <relExp>   ->    ) , ; ] and or
            <relop>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false true
       <returnStmt>   ->    ( * - ; CHARCONST ID NUMCONST STRINGCONST break else false if not return true while { }
    <scopedVarDecl>   ->    $ ( * - ; CHARCONST ID NUMCONST STRINGCONST bool break char else false if int not return true while { }
       <selectStmt>   ->    ( * - ; CHARCONST ID NUMCONST STRINGCONST break else false if not return true while { }
        <simpleExp>   ->    ) , ; ] or
             <stmt>   ->    ( * - ; CHARCONST ID NUMCONST STRINGCONST break else false if not return true while { }
         <stmtList>   ->    ( * - ; CHARCONST ID NUMCONST STRINGCONST break false if not return true while { }
           <sumExp>   ->    != ) + , - ; < <= == > >= ] and or
            <sumop>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false true
         <typeSpec>   ->    ID
         <unaryExp>   ->    != % ) * + , - / ; < <= == > >= ] and or
      <unaryRelExp>   ->    ) , ; ] and or
          <unaryop>   ->    ( * - CHARCONST ID NUMCONST STRINGCONST false true
          <varDecl>   ->    $ bool char int
        <varDeclId>   ->    , ; =
      <varDeclInit>   ->    , ;
      <varDeclList>   ->    , ;

================== closures ===================
[ 0 ]
            <_>  ->  | <program>
      <program>  ->  | <declList>
     <declList>  ->  | <declList> <decl>
     <declList>  ->  | <decl>
         <decl>  ->  | <varDecl>
         <decl>  ->  | <funDecl>
     <typeSpec>  ->  | bool
     <typeSpec>  ->  | char
     <typeSpec>  ->  | int
      <varDecl>  ->  | <typeSpec> <varDeclList> ;
      <funDecl>  ->  | <typeSpec> ID ( <parms> ) <compoundStmt>
[ 1 ]
     <declList>  ->  <decl> |
[ 2 ]
      <program>  ->  <declList> |
     <declList>  ->  <declList> | <decl>
         <decl>  ->  | <varDecl>
         <decl>  ->  | <funDecl>
     <typeSpec>  ->  | bool
     <typeSpec>  ->  | char
     <typeSpec>  ->  | int
      <varDecl>  ->  | <typeSpec> <varDeclList> ;
      <funDecl>  ->  | <typeSpec> ID ( <parms> ) <compoundStmt>
[ 3 ]
         <decl>  ->  <funDecl> |
[ 4 ]
            <_>  ->  <program> |
[ 5 ]
      <varDecl>  ->  <typeSpec> | <varDeclList> ;
  <varDeclList>  ->  | <varDeclList> , <varDeclInit>
  <varDeclList>  ->  | <varDeclInit>
  <varDeclInit>  ->  | <varDeclId>
  <varDeclInit>  ->  | <varDeclId> = <simpleExp>
    <varDeclId>  ->  | ID
    <varDeclId>  ->  | ID [ NUMCONST ]
      <funDecl>  ->  <typeSpec> | ID ( <parms> ) <compoundStmt>
[ 6 ]
         <decl>  ->  <varDecl> |
[ 7 ]
     <typeSpec>  ->  bool |
[ 8 ]
     <typeSpec>  ->  char |
[ 9 ]
     <typeSpec>  ->  int |
[ 10 ]
     <declList>  ->  <declList> <decl> |
[ 11 ]
  <varDeclInit>  ->  <varDeclId> |
  <varDeclInit>  ->  <varDeclId> | = <simpleExp>
[ 12 ]
  <varDeclList>  ->  <varDeclInit> |
[ 13 ]
      <varDecl>  ->  <typeSpec> <varDeclList> | ;
  <varDeclList>  ->  <varDeclList> | , <varDeclInit>
[ 14 ]
    <varDeclId>  ->  ID |
    <varDeclId>  ->  ID | [ NUMCONST ]
      <funDecl>  ->  <typeSpec> ID | ( <parms> ) <compoundStmt>
[ 15 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
  <varDeclInit>  ->  <varDeclId> = | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 16 ]
  <varDeclList>  ->  <varDeclList> , | <varDeclInit>
  <varDeclInit>  ->  | <varDeclId>
  <varDeclInit>  ->  | <varDeclId> = <simpleExp>
    <varDeclId>  ->  | ID
    <varDeclId>  ->  | ID [ NUMCONST ]
[ 17 ]
      <varDecl>  ->  <typeSpec> <varDeclList> ; |
[ 18 ]
     <typeSpec>  ->  | bool
     <typeSpec>  ->  | char
     <typeSpec>  ->  | int
      <funDecl>  ->  <typeSpec> ID ( | <parms> ) <compoundStmt>
        <parms>  ->  | <parmList>
        <parms>  ->  | EMPTY
        <parms>  ->  EMPTY |
     <parmList>  ->  | <parmList> ; <parmTypeList>
     <parmList>  ->  | <parmTypeList>
 <parmTypeList>  ->  | <typeSpec> <parmIdList>
[ 19 ]
    <varDeclId>  ->  ID [ | NUMCONST ]
[ 20 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
          <exp>  ->  | <mutable> <assignop> <exp>
          <exp>  ->  | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  ( | <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 21 ]
      <unaryop>  ->  * |
[ 22 ]
      <unaryop>  ->  - |
[ 23 ]
    <simpleExp>  ->  <andExp> |
       <andExp>  ->  <andExp> | and <unaryRelExp>
[ 24 ]
    <immutable>  ->  <call> |
[ 25 ]
    <immutable>  ->  <constant> |
[ 26 ]
     <unaryExp>  ->  <factor> |
[ 27 ]
       <factor>  ->  <immutable> |
[ 28 ]
        <mulop>  ->  | *
        <mulop>  ->  | /
        <mulop>  ->  | %
       <sumExp>  ->  <mulExp> |
       <mulExp>  ->  <mulExp> | <mulop> <unaryExp>
[ 29 ]
       <factor>  ->  <mutable> |
[ 30 ]
  <unaryRelExp>  ->  <relExp> |
[ 31 ]
  <varDeclInit>  ->  <varDeclId> = <simpleExp> |
    <simpleExp>  ->  <simpleExp> | or <andExp>
[ 32 ]
        <relop>  ->  | <
        <relop>  ->  | >
        <relop>  ->  | ==
        <relop>  ->  | !=
        <relop>  ->  | >=
        <relop>  ->  | <=
        <sumop>  ->  | +
        <sumop>  ->  | -
       <relExp>  ->  <sumExp> | <relop> <sumExp>
       <relExp>  ->  <sumExp> |
       <sumExp>  ->  <sumExp> | <sumop> <mulExp>
[ 33 ]
       <mulExp>  ->  <unaryExp> |
[ 34 ]
       <andExp>  ->  <unaryRelExp> |
[ 35 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  <unaryop> | <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 36 ]
     <constant>  ->  CHARCONST |
[ 37 ]
      <mutable>  ->  ID |
      <mutable>  ->  ID | [ <exp> ]
         <call>  ->  ID | ( <args> )
[ 38 ]
     <constant>  ->  NUMCONST |
[ 39 ]
     <constant>  ->  STRINGCONST |
[ 40 ]
     <constant>  ->  false |
[ 41 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  not | <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 42 ]
     <constant>  ->  true |
[ 43 ]
  <varDeclList>  ->  <varDeclList> , <varDeclInit> |
[ 44 ]
    <varDeclId>  ->  ID |
    <varDeclId>  ->  ID | [ NUMCONST ]
[ 45 ]
        <parms>  ->  <parmList> |
     <parmList>  ->  <parmList> | ; <parmTypeList>
[ 46 ]
     <parmList>  ->  <parmTypeList> |
[ 47 ]
      <funDecl>  ->  <typeSpec> ID ( <parms> | ) <compoundStmt>
[ 48 ]
 <parmTypeList>  ->  <typeSpec> | <parmIdList>
   <parmIdList>  ->  | <parmIdList> , <parmId>
   <parmIdList>  ->  | <parmId>
       <parmId>  ->  | ID
       <parmId>  ->  | ID [ ]
[ 49 ]
        <parms>  ->  EMPTY |
[ 50 ]
    <varDeclId>  ->  ID [ NUMCONST | ]
[ 51 ]
    <immutable>  ->  ( <exp> | )
[ 52 ]
     <assignop>  ->  | =
     <assignop>  ->  | *=
     <assignop>  ->  | /=
     <assignop>  ->  | +=
     <assignop>  ->  | -=
          <exp>  ->  <mutable> | <assignop> <exp>
       <factor>  ->  <mutable> |
[ 53 ]
          <exp>  ->  <simpleExp> |
    <simpleExp>  ->  <simpleExp> | or <andExp>
[ 54 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
       <andExp>  ->  <andExp> and | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 55 ]
        <mulop>  ->  % |
[ 56 ]
        <mulop>  ->  * |
[ 57 ]
        <mulop>  ->  / |
[ 58 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
       <mulExp>  ->  <mulExp> <mulop> | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 59 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
    <simpleExp>  ->  <simpleExp> or | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 60 ]
        <relop>  ->  != |
[ 61 ]
        <sumop>  ->  + |
[ 62 ]
        <sumop>  ->  - |
[ 63 ]
        <relop>  ->  < |
[ 64 ]
        <relop>  ->  <= |
[ 65 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
       <relExp>  ->  <sumExp> <relop> | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 66 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
       <sumExp>  ->  <sumExp> <sumop> | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 67 ]
        <relop>  ->  == |
[ 68 ]
        <relop>  ->  > |
[ 69 ]
        <relop>  ->  >= |
[ 70 ]
     <unaryExp>  ->  <unaryop> <unaryExp> |
[ 71 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
          <exp>  ->  | <mutable> <assignop> <exp>
          <exp>  ->  | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
         <call>  ->  ID ( | <args> )
         <args>  ->  | <argList>
         <args>  ->  | EMPTY
         <args>  ->  EMPTY |
      <argList>  ->  | <argList> , <exp>
      <argList>  ->  | <exp>
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 72 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
          <exp>  ->  | <mutable> <assignop> <exp>
          <exp>  ->  | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
      <mutable>  ->  ID [ | <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 73 ]
  <unaryRelExp>  ->  not <unaryRelExp> |
[ 74 ]
     <typeSpec>  ->  | bool
     <typeSpec>  ->  | char
     <typeSpec>  ->  | int
     <parmList>  ->  <parmList> ; | <parmTypeList>
 <parmTypeList>  ->  | <typeSpec> <parmIdList>
[ 75 ]
      <funDecl>  ->  <typeSpec> ID ( <parms> ) | <compoundStmt>
 <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 76 ]
   <parmIdList>  ->  <parmId> |
[ 77 ]
 <parmTypeList>  ->  <typeSpec> <parmIdList> |
   <parmIdList>  ->  <parmIdList> | , <parmId>
[ 78 ]
       <parmId>  ->  ID |
       <parmId>  ->  ID | [ ]
[ 79 ]
    <varDeclId>  ->  ID [ NUMCONST ] |
[ 80 ]
    <immutable>  ->  ( <exp> ) |
[ 81 ]
     <assignop>  ->  *= |
[ 82 ]
     <assignop>  ->  += |
[ 83 ]
     <assignop>  ->  -= |
[ 84 ]
     <assignop>  ->  /= |
[ 85 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
          <exp>  ->  | <mutable> <assignop> <exp>
          <exp>  ->  <mutable> <assignop> | <exp>
          <exp>  ->  | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 86 ]
     <assignop>  ->  = |
[ 87 ]
       <andExp>  ->  <andExp> and <unaryRelExp> |
[ 88 ]
       <mulExp>  ->  <mulExp> <mulop> <unaryExp> |
[ 89 ]
    <simpleExp>  ->  <simpleExp> or <andExp> |
       <andExp>  ->  <andExp> | and <unaryRelExp>
[ 90 ]
        <sumop>  ->  | +
        <sumop>  ->  | -
       <relExp>  ->  <sumExp> <relop> <sumExp> |
       <sumExp>  ->  <sumExp> | <sumop> <mulExp>
[ 91 ]
        <mulop>  ->  | *
        <mulop>  ->  | /
        <mulop>  ->  | %
       <sumExp>  ->  <sumExp> <sumop> <mulExp> |
       <mulExp>  ->  <mulExp> | <mulop> <unaryExp>
[ 92 ]
         <args>  ->  <argList> |
      <argList>  ->  <argList> | , <exp>
[ 93 ]
         <call>  ->  ID ( <args> | )
[ 94 ]
      <argList>  ->  <exp> |
[ 95 ]
         <args>  ->  EMPTY |
[ 96 ]
      <mutable>  ->  ID [ <exp> | ]
[ 97 ]
     <parmList>  ->  <parmList> ; <parmTypeList> |
[ 98 ]
      <funDecl>  ->  <typeSpec> ID ( <parms> ) <compoundStmt> |
[ 99 ]
 <compoundStmt>  ->  { | <localDecls> <stmtList> }
   <localDecls>  ->  | <localDecls> <scopedVarDecl>
   <localDecls>  ->  | EMPTY
   <localDecls>  ->  EMPTY |
[ 100 ]
   <parmIdList>  ->  <parmIdList> , | <parmId>
       <parmId>  ->  | ID
       <parmId>  ->  | ID [ ]
[ 101 ]
       <parmId>  ->  ID [ | ]
[ 102 ]
          <exp>  ->  <mutable> <assignop> <exp> |
[ 103 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
          <exp>  ->  | <mutable> <assignop> <exp>
          <exp>  ->  | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
      <argList>  ->  <argList> , | <exp>
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 104 ]
         <call>  ->  ID ( <args> ) |
[ 105 ]
      <mutable>  ->  ID [ <exp> ] |
[ 106 ]
     <typeSpec>  ->  | bool
     <typeSpec>  ->  | char
     <typeSpec>  ->  | int
<scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
     <stmtList>  ->  | <stmtList> <stmt>
     <stmtList>  ->  | EMPTY
     <stmtList>  ->  EMPTY |
 <compoundStmt>  ->  { <localDecls> | <stmtList> }
   <localDecls>  ->  <localDecls> | <scopedVarDecl>
[ 107 ]
   <localDecls>  ->  EMPTY |
[ 108 ]
   <parmIdList>  ->  <parmIdList> , <parmId> |
[ 109 ]
       <parmId>  ->  ID [ ] |
[ 110 ]
      <argList>  ->  <argList> , <exp> |
[ 111 ]
   <localDecls>  ->  <localDecls> <scopedVarDecl> |
[ 112 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
     <stmtList>  ->  <stmtList> | <stmt>
         <stmt>  ->  | <expStmt>
         <stmt>  ->  | <compoundStmt>
         <stmt>  ->  | <selectStmt>
         <stmt>  ->  | <iterStmt>
         <stmt>  ->  | <returnStmt>
         <stmt>  ->  | <breakStmt>
      <expStmt>  ->  | <exp> ;
      <expStmt>  ->  | ;
 <compoundStmt>  ->  | { <localDecls> <stmtList> }
 <compoundStmt>  ->  { <localDecls> <stmtList> | }
   <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
   <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
     <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
   <returnStmt>  ->  | return ;
   <returnStmt>  ->  | return <exp> ;
    <breakStmt>  ->  | break ;
          <exp>  ->  | <mutable> <assignop> <exp>
          <exp>  ->  | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 113 ]
<scopedVarDecl>  ->  <typeSpec> | <varDeclList> ;
  <varDeclList>  ->  | <varDeclList> , <varDeclInit>
  <varDeclList>  ->  | <varDeclInit>
  <varDeclInit>  ->  | <varDeclId>
  <varDeclInit>  ->  | <varDeclId> = <simpleExp>
    <varDeclId>  ->  | ID
    <varDeclId>  ->  | ID [ NUMCONST ]
[ 114 ]
     <stmtList>  ->  EMPTY |
[ 115 ]
      <expStmt>  ->  ; |
[ 116 ]
         <stmt>  ->  <breakStmt> |
[ 117 ]
         <stmt>  ->  <compoundStmt> |
[ 118 ]
      <expStmt>  ->  <exp> | ;
[ 119 ]
         <stmt>  ->  <expStmt> |
[ 120 ]
         <stmt>  ->  <iterStmt> |
[ 121 ]
         <stmt>  ->  <returnStmt> |
[ 122 ]
         <stmt>  ->  <selectStmt> |
[ 123 ]
     <stmtList>  ->  <stmtList> <stmt> |
[ 124 ]
    <breakStmt>  ->  break | ;
[ 125 ]
   <selectStmt>  ->  if | ( <simpleExp> ) then <stmt>
   <selectStmt>  ->  if | ( <simpleExp> ) then <stmt> else <stmt>
[ 126 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
   <returnStmt>  ->  return | ;
   <returnStmt>  ->  return | <exp> ;
          <exp>  ->  | <mutable> <assignop> <exp>
          <exp>  ->  | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 127 ]
     <iterStmt>  ->  while | ( <simpleExp> ) <stmt>
[ 128 ]
 <compoundStmt>  ->  { <localDecls> <stmtList> } |
[ 129 ]
<scopedVarDecl>  ->  <typeSpec> <varDeclList> | ;
  <varDeclList>  ->  <varDeclList> | , <varDeclInit>
[ 130 ]
      <expStmt>  ->  <exp> ; |
[ 131 ]
    <breakStmt>  ->  break ; |
[ 132 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
   <selectStmt>  ->  if ( | <simpleExp> ) then <stmt>
   <selectStmt>  ->  if ( | <simpleExp> ) then <stmt> else <stmt>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 133 ]
   <returnStmt>  ->  return ; |
[ 134 ]
   <returnStmt>  ->  return <exp> | ;
[ 135 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
     <iterStmt>  ->  while ( | <simpleExp> ) <stmt>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 136 ]
<scopedVarDecl>  ->  <typeSpec> <varDeclList> ; |
[ 137 ]
   <selectStmt>  ->  if ( <simpleExp> | ) then <stmt>
   <selectStmt>  ->  if ( <simpleExp> | ) then <stmt> else <stmt>
    <simpleExp>  ->  <simpleExp> | or <andExp>
[ 138 ]
   <returnStmt>  ->  return <exp> ; |
[ 139 ]
     <iterStmt>  ->  while ( <simpleExp> | ) <stmt>
    <simpleExp>  ->  <simpleExp> | or <andExp>
[ 140 ]
   <selectStmt>  ->  if ( <simpleExp> ) | then <stmt>
   <selectStmt>  ->  if ( <simpleExp> ) | then <stmt> else <stmt>
[ 141 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
         <stmt>  ->  | <expStmt>
         <stmt>  ->  | <compoundStmt>
         <stmt>  ->  | <selectStmt>
         <stmt>  ->  | <iterStmt>
         <stmt>  ->  | <returnStmt>
         <stmt>  ->  | <breakStmt>
      <expStmt>  ->  | <exp> ;
      <expStmt>  ->  | ;
 <compoundStmt>  ->  | { <localDecls> <stmtList> }
   <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
   <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
     <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
     <iterStmt>  ->  while ( <simpleExp> ) | <stmt>
   <returnStmt>  ->  | return ;
   <returnStmt>  ->  | return <exp> ;
    <breakStmt>  ->  | break ;
          <exp>  ->  | <mutable> <assignop> <exp>
          <exp>  ->  | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 142 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
         <stmt>  ->  | <expStmt>
         <stmt>  ->  | <compoundStmt>
         <stmt>  ->  | <selectStmt>
         <stmt>  ->  | <iterStmt>
         <stmt>  ->  | <returnStmt>
         <stmt>  ->  | <breakStmt>
      <expStmt>  ->  | <exp> ;
      <expStmt>  ->  | ;
 <compoundStmt>  ->  | { <localDecls> <stmtList> }
   <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
   <selectStmt>  ->  if ( <simpleExp> ) then | <stmt>
   <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
   <selectStmt>  ->  if ( <simpleExp> ) then | <stmt> else <stmt>
     <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
   <returnStmt>  ->  | return ;
   <returnStmt>  ->  | return <exp> ;
    <breakStmt>  ->  | break ;
          <exp>  ->  | <mutable> <assignop> <exp>
          <exp>  ->  | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 143 ]
     <iterStmt>  ->  while ( <simpleExp> ) <stmt> |
[ 144 ]
   <selectStmt>  ->  if ( <simpleExp> ) then <stmt> |
   <selectStmt>  ->  if ( <simpleExp> ) then <stmt> | else <stmt>
[ 145 ]
      <unaryop>  ->  | -
      <unaryop>  ->  | *
         <stmt>  ->  | <expStmt>
         <stmt>  ->  | <compoundStmt>
         <stmt>  ->  | <selectStmt>
         <stmt>  ->  | <iterStmt>
         <stmt>  ->  | <returnStmt>
         <stmt>  ->  | <breakStmt>
      <expStmt>  ->  | <exp> ;
      <expStmt>  ->  | ;
 <compoundStmt>  ->  | { <localDecls> <stmtList> }
   <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
   <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
   <selectStmt>  ->  if ( <simpleExp> ) then <stmt> else | <stmt>
     <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
   <returnStmt>  ->  | return ;
   <returnStmt>  ->  | return <exp> ;
    <breakStmt>  ->  | break ;
          <exp>  ->  | <mutable> <assignop> <exp>
          <exp>  ->  | <simpleExp>
    <simpleExp>  ->  | <simpleExp> or <andExp>
    <simpleExp>  ->  | <andExp>
       <andExp>  ->  | <andExp> and <unaryRelExp>
       <andExp>  ->  | <unaryRelExp>
  <unaryRelExp>  ->  | not <unaryRelExp>
  <unaryRelExp>  ->  | <relExp>
       <relExp>  ->  | <sumExp> <relop> <sumExp>
       <relExp>  ->  | <sumExp>
       <sumExp>  ->  | <sumExp> <sumop> <mulExp>
       <sumExp>  ->  | <mulExp>
       <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
       <mulExp>  ->  | <unaryExp>
     <unaryExp>  ->  | <unaryop> <unaryExp>
     <unaryExp>  ->  | <factor>
       <factor>  ->  | <mutable>
       <factor>  ->  | <immutable>
      <mutable>  ->  | ID
      <mutable>  ->  | ID [ <exp> ]
    <immutable>  ->  | ( <exp> )
    <immutable>  ->  | <call>
    <immutable>  ->  | <constant>
         <call>  ->  | ID ( <args> )
     <constant>  ->  | NUMCONST
     <constant>  ->  | CHARCONST
     <constant>  ->  | STRINGCONST
     <constant>  ->  | true
     <constant>  ->  | false
[ 146 ]
   <selectStmt>  ->  if ( <simpleExp> ) then <stmt> else <stmt> |

================== table ======================
[ 0 ]             bool      s 7
[ 0 ]             char      s 8
[ 0 ]              int      s 9
[ 0 ]           <decl>      goto 1
[ 0 ]       <declList>      goto 2
[ 0 ]        <funDecl>      goto 3
[ 0 ]        <program>      goto 4
[ 0 ]       <typeSpec>      goto 5
[ 0 ]        <varDecl>      goto 6

[ 1 ]                $      r      <declList>  ->  | <decl>
[ 1 ]             bool      r      <declList>  ->  | <decl>
[ 1 ]             char      r      <declList>  ->  | <decl>
[ 1 ]              int      r      <declList>  ->  | <decl>

[ 2 ]                $      r       <program>  ->  | <declList>
[ 2 ]             bool      s 7
[ 2 ]             char      s 8
[ 2 ]              int      s 9
[ 2 ]           <decl>      goto 10
[ 2 ]        <funDecl>      goto 3
[ 2 ]       <typeSpec>      goto 5
[ 2 ]        <varDecl>      goto 6

[ 3 ]                $      r          <decl>  ->  | <funDecl>
[ 3 ]             bool      r          <decl>  ->  | <funDecl>
[ 3 ]             char      r          <decl>  ->  | <funDecl>
[ 3 ]              int      r          <decl>  ->  | <funDecl>

[ 4 ]                $      acc

[ 5 ]               ID      s 14
[ 5 ]      <varDeclId>      goto 11
[ 5 ]    <varDeclInit>      goto 12
[ 5 ]    <varDeclList>      goto 13

[ 6 ]                $      r          <decl>  ->  | <varDecl>
[ 6 ]             bool      r          <decl>  ->  | <varDecl>
[ 6 ]             char      r          <decl>  ->  | <varDecl>
[ 6 ]              int      r          <decl>  ->  | <varDecl>

[ 7 ]               ID      r      <typeSpec>  ->  | bool

[ 8 ]               ID      r      <typeSpec>  ->  | char

[ 9 ]               ID      r      <typeSpec>  ->  | int

[ 10 ]                $      r      <declList>  ->  | <declList> <decl>
[ 10 ]             bool      r      <declList>  ->  | <declList> <decl>
[ 10 ]             char      r      <declList>  ->  | <declList> <decl>
[ 10 ]              int      r      <declList>  ->  | <declList> <decl>

[ 11 ]                ,      r   <varDeclInit>  ->  | <varDeclId>
[ 11 ]                ;      r   <varDeclInit>  ->  | <varDeclId>
[ 11 ]                =      s 15

[ 12 ]                ,      r   <varDeclList>  ->  | <varDeclInit>
[ 12 ]                ;      r   <varDeclList>  ->  | <varDeclInit>

[ 13 ]                ,      s 16
[ 13 ]                ;      s 17

[ 14 ]                (      s 18
[ 14 ]                ,      r     <varDeclId>  ->  | ID
[ 14 ]                ;      r     <varDeclId>  ->  | ID
[ 14 ]                =      r     <varDeclId>  ->  | ID
[ 14 ]                [      s 19

[ 15 ]                (      s 20
[ 15 ]                *      s 21
[ 15 ]                -      s 22
[ 15 ]        CHARCONST      s 36
[ 15 ]               ID      s 37
[ 15 ]         NUMCONST      s 38
[ 15 ]      STRINGCONST      s 39
[ 15 ]            false      s 40
[ 15 ]              not      s 41
[ 15 ]             true      s 42
[ 15 ]         <andExp>      goto 23
[ 15 ]           <call>      goto 24
[ 15 ]       <constant>      goto 25
[ 15 ]         <factor>      goto 26
[ 15 ]      <immutable>      goto 27
[ 15 ]         <mulExp>      goto 28
[ 15 ]        <mutable>      goto 29
[ 15 ]         <relExp>      goto 30
[ 15 ]      <simpleExp>      goto 31
[ 15 ]         <sumExp>      goto 32
[ 15 ]       <unaryExp>      goto 33
[ 15 ]    <unaryRelExp>      goto 34
[ 15 ]        <unaryop>      goto 35

[ 16 ]               ID      s 44
[ 16 ]      <varDeclId>      goto 11
[ 16 ]    <varDeclInit>      goto 43

[ 17 ]                $      r       <varDecl>  ->  | <typeSpec> <varDeclList> ;
[ 17 ]             bool      r       <varDecl>  ->  | <typeSpec> <varDeclList> ;
[ 17 ]             char      r       <varDecl>  ->  | <typeSpec> <varDeclList> ;
[ 17 ]              int      r       <varDecl>  ->  | <typeSpec> <varDeclList> ;

[ 18 ]                )      r         <parms>  ->  | EMPTY
[ 18 ]             bool      s 7
[ 18 ]             char      s 8
[ 18 ]              int      s 9
[ 18 ]       <parmList>      goto 45
[ 18 ]   <parmTypeList>      goto 46
[ 18 ]          <parms>      goto 47
[ 18 ]       <typeSpec>      goto 48

[ 19 ]         NUMCONST      s 50

[ 20 ]                (      s 20
[ 20 ]                *      s 21
[ 20 ]                -      s 22
[ 20 ]        CHARCONST      s 36
[ 20 ]               ID      s 37
[ 20 ]         NUMCONST      s 38
[ 20 ]      STRINGCONST      s 39
[ 20 ]            false      s 40
[ 20 ]              not      s 41
[ 20 ]             true      s 42
[ 20 ]         <andExp>      goto 23
[ 20 ]           <call>      goto 24
[ 20 ]       <constant>      goto 25
[ 20 ]            <exp>      goto 51
[ 20 ]         <factor>      goto 26
[ 20 ]      <immutable>      goto 27
[ 20 ]         <mulExp>      goto 28
[ 20 ]        <mutable>      goto 52
[ 20 ]         <relExp>      goto 30
[ 20 ]      <simpleExp>      goto 53
[ 20 ]         <sumExp>      goto 32
[ 20 ]       <unaryExp>      goto 33
[ 20 ]    <unaryRelExp>      goto 34
[ 20 ]        <unaryop>      goto 35

[ 21 ]                (      r       <unaryop>  ->  | *
[ 21 ]                *      r       <unaryop>  ->  | *
[ 21 ]                -      r       <unaryop>  ->  | *
[ 21 ]        CHARCONST      r       <unaryop>  ->  | *
[ 21 ]               ID      r       <unaryop>  ->  | *
[ 21 ]         NUMCONST      r       <unaryop>  ->  | *
[ 21 ]      STRINGCONST      r       <unaryop>  ->  | *
[ 21 ]            false      r       <unaryop>  ->  | *
[ 21 ]             true      r       <unaryop>  ->  | *

[ 22 ]                (      r       <unaryop>  ->  | -
[ 22 ]                *      r       <unaryop>  ->  | -
[ 22 ]                -      r       <unaryop>  ->  | -
[ 22 ]        CHARCONST      r       <unaryop>  ->  | -
[ 22 ]               ID      r       <unaryop>  ->  | -
[ 22 ]         NUMCONST      r       <unaryop>  ->  | -
[ 22 ]      STRINGCONST      r       <unaryop>  ->  | -
[ 22 ]            false      r       <unaryop>  ->  | -
[ 22 ]             true      r       <unaryop>  ->  | -

[ 23 ]                )      r     <simpleExp>  ->  | <andExp>
[ 23 ]                ,      r     <simpleExp>  ->  | <andExp>
[ 23 ]                ;      r     <simpleExp>  ->  | <andExp>
[ 23 ]                ]      r     <simpleExp>  ->  | <andExp>
[ 23 ]              and      s 54
[ 23 ]               or      r     <simpleExp>  ->  | <andExp>

[ 24 ]               !=      r     <immutable>  ->  | <call>
[ 24 ]                %      r     <immutable>  ->  | <call>
[ 24 ]                )      r     <immutable>  ->  | <call>
[ 24 ]                *      r     <immutable>  ->  | <call>
[ 24 ]                +      r     <immutable>  ->  | <call>
[ 24 ]                ,      r     <immutable>  ->  | <call>
[ 24 ]                -      r     <immutable>  ->  | <call>
[ 24 ]                /      r     <immutable>  ->  | <call>
[ 24 ]                ;      r     <immutable>  ->  | <call>
[ 24 ]                <      r     <immutable>  ->  | <call>
[ 24 ]               <=      r     <immutable>  ->  | <call>
[ 24 ]               ==      r     <immutable>  ->  | <call>
[ 24 ]                >      r     <immutable>  ->  | <call>
[ 24 ]               >=      r     <immutable>  ->  | <call>
[ 24 ]                ]      r     <immutable>  ->  | <call>
[ 24 ]              and      r     <immutable>  ->  | <call>
[ 24 ]               or      r     <immutable>  ->  | <call>

[ 25 ]               !=      r     <immutable>  ->  | <constant>
[ 25 ]                %      r     <immutable>  ->  | <constant>
[ 25 ]                )      r     <immutable>  ->  | <constant>
[ 25 ]                *      r     <immutable>  ->  | <constant>
[ 25 ]                +      r     <immutable>  ->  | <constant>
[ 25 ]                ,      r     <immutable>  ->  | <constant>
[ 25 ]                -      r     <immutable>  ->  | <constant>
[ 25 ]                /      r     <immutable>  ->  | <constant>
[ 25 ]                ;      r     <immutable>  ->  | <constant>
[ 25 ]                <      r     <immutable>  ->  | <constant>
[ 25 ]               <=      r     <immutable>  ->  | <constant>
[ 25 ]               ==      r     <immutable>  ->  | <constant>
[ 25 ]                >      r     <immutable>  ->  | <constant>
[ 25 ]               >=      r     <immutable>  ->  | <constant>
[ 25 ]                ]      r     <immutable>  ->  | <constant>
[ 25 ]              and      r     <immutable>  ->  | <constant>
[ 25 ]               or      r     <immutable>  ->  | <constant>

[ 26 ]               !=      r      <unaryExp>  ->  | <factor>
[ 26 ]                %      r      <unaryExp>  ->  | <factor>
[ 26 ]                )      r      <unaryExp>  ->  | <factor>
[ 26 ]                *      r      <unaryExp>  ->  | <factor>
[ 26 ]                +      r      <unaryExp>  ->  | <factor>
[ 26 ]                ,      r      <unaryExp>  ->  | <factor>
[ 26 ]                -      r      <unaryExp>  ->  | <factor>
[ 26 ]                /      r      <unaryExp>  ->  | <factor>
[ 26 ]                ;      r      <unaryExp>  ->  | <factor>
[ 26 ]                <      r      <unaryExp>  ->  | <factor>
[ 26 ]               <=      r      <unaryExp>  ->  | <factor>
[ 26 ]               ==      r      <unaryExp>  ->  | <factor>
[ 26 ]                >      r      <unaryExp>  ->  | <factor>
[ 26 ]               >=      r      <unaryExp>  ->  | <factor>
[ 26 ]                ]      r      <unaryExp>  ->  | <factor>
[ 26 ]              and      r      <unaryExp>  ->  | <factor>
[ 26 ]               or      r      <unaryExp>  ->  | <factor>

[ 27 ]               !=      r        <factor>  ->  | <immutable>
[ 27 ]                %      r        <factor>  ->  | <immutable>
[ 27 ]                )      r        <factor>  ->  | <immutable>
[ 27 ]                *      r        <factor>  ->  | <immutable>
[ 27 ]                +      r        <factor>  ->  | <immutable>
[ 27 ]                ,      r        <factor>  ->  | <immutable>
[ 27 ]                -      r        <factor>  ->  | <immutable>
[ 27 ]                /      r        <factor>  ->  | <immutable>
[ 27 ]                ;      r        <factor>  ->  | <immutable>
[ 27 ]                <      r        <factor>  ->  | <immutable>
[ 27 ]               <=      r        <factor>  ->  | <immutable>
[ 27 ]               ==      r        <factor>  ->  | <immutable>
[ 27 ]                >      r        <factor>  ->  | <immutable>
[ 27 ]               >=      r        <factor>  ->  | <immutable>
[ 27 ]                ]      r        <factor>  ->  | <immutable>
[ 27 ]              and      r        <factor>  ->  | <immutable>
[ 27 ]               or      r        <factor>  ->  | <immutable>

[ 28 ]               !=      r        <sumExp>  ->  | <mulExp>
[ 28 ]                %      s 55
[ 28 ]                )      r        <sumExp>  ->  | <mulExp>
[ 28 ]                *      s 56
[ 28 ]                +      r        <sumExp>  ->  | <mulExp>
[ 28 ]                ,      r        <sumExp>  ->  | <mulExp>
[ 28 ]                -      r        <sumExp>  ->  | <mulExp>
[ 28 ]                /      s 57
[ 28 ]                ;      r        <sumExp>  ->  | <mulExp>
[ 28 ]                <      r        <sumExp>  ->  | <mulExp>
[ 28 ]               <=      r        <sumExp>  ->  | <mulExp>
[ 28 ]               ==      r        <sumExp>  ->  | <mulExp>
[ 28 ]                >      r        <sumExp>  ->  | <mulExp>
[ 28 ]               >=      r        <sumExp>  ->  | <mulExp>
[ 28 ]                ]      r        <sumExp>  ->  | <mulExp>
[ 28 ]              and      r        <sumExp>  ->  | <mulExp>
[ 28 ]               or      r        <sumExp>  ->  | <mulExp>
[ 28 ]          <mulop>      goto 58

[ 29 ]               !=      r        <factor>  ->  | <mutable>
[ 29 ]                %      r        <factor>  ->  | <mutable>
[ 29 ]                )      r        <factor>  ->  | <mutable>
[ 29 ]                *      r        <factor>  ->  | <mutable>
[ 29 ]                +      r        <factor>  ->  | <mutable>
[ 29 ]                ,      r        <factor>  ->  | <mutable>
[ 29 ]                -      r        <factor>  ->  | <mutable>
[ 29 ]                /      r        <factor>  ->  | <mutable>
[ 29 ]                ;      r        <factor>  ->  | <mutable>
[ 29 ]                <      r        <factor>  ->  | <mutable>
[ 29 ]               <=      r        <factor>  ->  | <mutable>
[ 29 ]               ==      r        <factor>  ->  | <mutable>
[ 29 ]                >      r        <factor>  ->  | <mutable>
[ 29 ]               >=      r        <factor>  ->  | <mutable>
[ 29 ]                ]      r        <factor>  ->  | <mutable>
[ 29 ]              and      r        <factor>  ->  | <mutable>
[ 29 ]               or      r        <factor>  ->  | <mutable>

[ 30 ]                )      r   <unaryRelExp>  ->  | <relExp>
[ 30 ]                ,      r   <unaryRelExp>  ->  | <relExp>
[ 30 ]                ;      r   <unaryRelExp>  ->  | <relExp>
[ 30 ]                ]      r   <unaryRelExp>  ->  | <relExp>
[ 30 ]              and      r   <unaryRelExp>  ->  | <relExp>
[ 30 ]               or      r   <unaryRelExp>  ->  | <relExp>

[ 31 ]                ,      r   <varDeclInit>  ->  | <varDeclId> = <simpleExp>
[ 31 ]                ;      r   <varDeclInit>  ->  | <varDeclId> = <simpleExp>
[ 31 ]               or      s 59

[ 32 ]               !=      s 60
[ 32 ]                )      r        <relExp>  ->  | <sumExp>
[ 32 ]                +      s 61
[ 32 ]                ,      r        <relExp>  ->  | <sumExp>
[ 32 ]                -      s 62
[ 32 ]                ;      r        <relExp>  ->  | <sumExp>
[ 32 ]                <      s 63
[ 32 ]               <=      s 64
[ 32 ]               ==      s 67
[ 32 ]                >      s 68
[ 32 ]               >=      s 69
[ 32 ]                ]      r        <relExp>  ->  | <sumExp>
[ 32 ]              and      r        <relExp>  ->  | <sumExp>
[ 32 ]               or      r        <relExp>  ->  | <sumExp>
[ 32 ]          <relop>      goto 65
[ 32 ]          <sumop>      goto 66

[ 33 ]               !=      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                %      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                )      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                *      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                +      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                ,      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                -      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                /      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                ;      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                <      r        <mulExp>  ->  | <unaryExp>
[ 33 ]               <=      r        <mulExp>  ->  | <unaryExp>
[ 33 ]               ==      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                >      r        <mulExp>  ->  | <unaryExp>
[ 33 ]               >=      r        <mulExp>  ->  | <unaryExp>
[ 33 ]                ]      r        <mulExp>  ->  | <unaryExp>
[ 33 ]              and      r        <mulExp>  ->  | <unaryExp>
[ 33 ]               or      r        <mulExp>  ->  | <unaryExp>

[ 34 ]                )      r        <andExp>  ->  | <unaryRelExp>
[ 34 ]                ,      r        <andExp>  ->  | <unaryRelExp>
[ 34 ]                ;      r        <andExp>  ->  | <unaryRelExp>
[ 34 ]                ]      r        <andExp>  ->  | <unaryRelExp>
[ 34 ]              and      r        <andExp>  ->  | <unaryRelExp>
[ 34 ]               or      r        <andExp>  ->  | <unaryRelExp>

[ 35 ]                (      s 20
[ 35 ]                *      s 21
[ 35 ]                -      s 22
[ 35 ]        CHARCONST      s 36
[ 35 ]               ID      s 37
[ 35 ]         NUMCONST      s 38
[ 35 ]      STRINGCONST      s 39
[ 35 ]            false      s 40
[ 35 ]             true      s 42
[ 35 ]           <call>      goto 24
[ 35 ]       <constant>      goto 25
[ 35 ]         <factor>      goto 26
[ 35 ]      <immutable>      goto 27
[ 35 ]        <mutable>      goto 29
[ 35 ]       <unaryExp>      goto 70
[ 35 ]        <unaryop>      goto 35

[ 36 ]               !=      r      <constant>  ->  | CHARCONST
[ 36 ]                %      r      <constant>  ->  | CHARCONST
[ 36 ]                )      r      <constant>  ->  | CHARCONST
[ 36 ]                *      r      <constant>  ->  | CHARCONST
[ 36 ]                +      r      <constant>  ->  | CHARCONST
[ 36 ]                ,      r      <constant>  ->  | CHARCONST
[ 36 ]                -      r      <constant>  ->  | CHARCONST
[ 36 ]                /      r      <constant>  ->  | CHARCONST
[ 36 ]                ;      r      <constant>  ->  | CHARCONST
[ 36 ]                <      r      <constant>  ->  | CHARCONST
[ 36 ]               <=      r      <constant>  ->  | CHARCONST
[ 36 ]               ==      r      <constant>  ->  | CHARCONST
[ 36 ]                >      r      <constant>  ->  | CHARCONST
[ 36 ]               >=      r      <constant>  ->  | CHARCONST
[ 36 ]                ]      r      <constant>  ->  | CHARCONST
[ 36 ]              and      r      <constant>  ->  | CHARCONST
[ 36 ]               or      r      <constant>  ->  | CHARCONST

[ 37 ]               !=      r       <mutable>  ->  | ID
[ 37 ]                %      r       <mutable>  ->  | ID
[ 37 ]                (      s 71
[ 37 ]                )      r       <mutable>  ->  | ID
[ 37 ]                *      r       <mutable>  ->  | ID
[ 37 ]               *=      r       <mutable>  ->  | ID
[ 37 ]                +      r       <mutable>  ->  | ID
[ 37 ]               +=      r       <mutable>  ->  | ID
[ 37 ]                ,      r       <mutable>  ->  | ID
[ 37 ]                -      r       <mutable>  ->  | ID
[ 37 ]               -=      r       <mutable>  ->  | ID
[ 37 ]                /      r       <mutable>  ->  | ID
[ 37 ]               /=      r       <mutable>  ->  | ID
[ 37 ]                ;      r       <mutable>  ->  | ID
[ 37 ]                <      r       <mutable>  ->  | ID
[ 37 ]               <=      r       <mutable>  ->  | ID
[ 37 ]                =      r       <mutable>  ->  | ID
[ 37 ]               ==      r       <mutable>  ->  | ID
[ 37 ]                >      r       <mutable>  ->  | ID
[ 37 ]               >=      r       <mutable>  ->  | ID
[ 37 ]                [      s 72
[ 37 ]                ]      r       <mutable>  ->  | ID
[ 37 ]              and      r       <mutable>  ->  | ID
[ 37 ]               or      r       <mutable>  ->  | ID

[ 38 ]               !=      r      <constant>  ->  | NUMCONST
[ 38 ]                %      r      <constant>  ->  | NUMCONST
[ 38 ]                )      r      <constant>  ->  | NUMCONST
[ 38 ]                *      r      <constant>  ->  | NUMCONST
[ 38 ]                +      r      <constant>  ->  | NUMCONST
[ 38 ]                ,      r      <constant>  ->  | NUMCONST
[ 38 ]                -      r      <constant>  ->  | NUMCONST
[ 38 ]                /      r      <constant>  ->  | NUMCONST
[ 38 ]                ;      r      <constant>  ->  | NUMCONST
[ 38 ]                <      r      <constant>  ->  | NUMCONST
[ 38 ]               <=      r      <constant>  ->  | NUMCONST
[ 38 ]               ==      r      <constant>  ->  | NUMCONST
[ 38 ]                >      r      <constant>  ->  | NUMCONST
[ 38 ]               >=      r      <constant>  ->  | NUMCONST
[ 38 ]                ]      r      <constant>  ->  | NUMCONST
[ 38 ]              and      r      <constant>  ->  | NUMCONST
[ 38 ]               or      r      <constant>  ->  | NUMCONST

[ 39 ]               !=      r      <constant>  ->  | STRINGCONST
[ 39 ]                %      r      <constant>  ->  | STRINGCONST
[ 39 ]                )      r      <constant>  ->  | STRINGCONST
[ 39 ]                *      r      <constant>  ->  | STRINGCONST
[ 39 ]                +      r      <constant>  ->  | STRINGCONST
[ 39 ]                ,      r      <constant>  ->  | STRINGCONST
[ 39 ]                -      r      <constant>  ->  | STRINGCONST
[ 39 ]                /      r      <constant>  ->  | STRINGCONST
[ 39 ]                ;      r      <constant>  ->  | STRINGCONST
[ 39 ]                <      r      <constant>  ->  | STRINGCONST
[ 39 ]               <=      r      <constant>  ->  | STRINGCONST
[ 39 ]               ==      r      <constant>  ->  | STRINGCONST
[ 39 ]                >      r      <constant>  ->  | STRINGCONST
[ 39 ]               >=      r      <constant>  ->  | STRINGCONST
[ 39 ]                ]      r      <constant>  ->  | STRINGCONST
[ 39 ]              and      r      <constant>  ->  | STRINGCONST
[ 39 ]               or      r      <constant>  ->  | STRINGCONST

[ 40 ]               !=      r      <constant>  ->  | false
[ 40 ]                %      r      <constant>  ->  | false
[ 40 ]                )      r      <constant>  ->  | false
[ 40 ]                *      r      <constant>  ->  | false
[ 40 ]                +      r      <constant>  ->  | false
[ 40 ]                ,      r      <constant>  ->  | false
[ 40 ]                -      r      <constant>  ->  | false
[ 40 ]                /      r      <constant>  ->  | false
[ 40 ]                ;      r      <constant>  ->  | false
[ 40 ]                <      r      <constant>  ->  | false
[ 40 ]               <=      r      <constant>  ->  | false
[ 40 ]               ==      r      <constant>  ->  | false
[ 40 ]                >      r      <constant>  ->  | false
[ 40 ]               >=      r      <constant>  ->  | false
[ 40 ]                ]      r      <constant>  ->  | false
[ 40 ]              and      r      <constant>  ->  | false
[ 40 ]               or      r      <constant>  ->  | false

[ 41 ]                (      s 20
[ 41 ]                *      s 21
[ 41 ]                -      s 22
[ 41 ]        CHARCONST      s 36
[ 41 ]               ID      s 37
[ 41 ]         NUMCONST      s 38
[ 41 ]      STRINGCONST      s 39
[ 41 ]            false      s 40
[ 41 ]              not      s 41
[ 41 ]             true      s 42
[ 41 ]           <call>      goto 24
[ 41 ]       <constant>      goto 25
[ 41 ]         <factor>      goto 26
[ 41 ]      <immutable>      goto 27
[ 41 ]         <mulExp>      goto 28
[ 41 ]        <mutable>      goto 29
[ 41 ]         <relExp>      goto 30
[ 41 ]         <sumExp>      goto 32
[ 41 ]       <unaryExp>      goto 33
[ 41 ]    <unaryRelExp>      goto 73
[ 41 ]        <unaryop>      goto 35

[ 42 ]               !=      r      <constant>  ->  | true
[ 42 ]                %      r      <constant>  ->  | true
[ 42 ]                )      r      <constant>  ->  | true
[ 42 ]                *      r      <constant>  ->  | true
[ 42 ]                +      r      <constant>  ->  | true
[ 42 ]                ,      r      <constant>  ->  | true
[ 42 ]                -      r      <constant>  ->  | true
[ 42 ]                /      r      <constant>  ->  | true
[ 42 ]                ;      r      <constant>  ->  | true
[ 42 ]                <      r      <constant>  ->  | true
[ 42 ]               <=      r      <constant>  ->  | true
[ 42 ]               ==      r      <constant>  ->  | true
[ 42 ]                >      r      <constant>  ->  | true
[ 42 ]               >=      r      <constant>  ->  | true
[ 42 ]                ]      r      <constant>  ->  | true
[ 42 ]              and      r      <constant>  ->  | true
[ 42 ]               or      r      <constant>  ->  | true

[ 43 ]                ,      r   <varDeclList>  ->  | <varDeclList> , <varDeclInit>
[ 43 ]                ;      r   <varDeclList>  ->  | <varDeclList> , <varDeclInit>

[ 44 ]                ,      r     <varDeclId>  ->  | ID
[ 44 ]                ;      r     <varDeclId>  ->  | ID
[ 44 ]                =      r     <varDeclId>  ->  | ID
[ 44 ]                [      s 19

[ 45 ]                )      r         <parms>  ->  | <parmList>
[ 45 ]                ;      s 74

[ 46 ]                )      r      <parmList>  ->  | <parmTypeList>
[ 46 ]                ;      r      <parmList>  ->  | <parmTypeList>

[ 47 ]                )      s 75

[ 48 ]               ID      s 78
[ 48 ]         <parmId>      goto 76
[ 48 ]     <parmIdList>      goto 77

[ 49 ]                )      r         <parms>  ->  | EMPTY

[ 50 ]                ]      s 79

[ 51 ]                )      s 80

[ 52 ]               !=      r        <factor>  ->  | <mutable>
[ 52 ]                %      r        <factor>  ->  | <mutable>
[ 52 ]                )      r        <factor>  ->  | <mutable>
[ 52 ]                *      r        <factor>  ->  | <mutable>
[ 52 ]               *=      s 81
[ 52 ]                +      r        <factor>  ->  | <mutable>
[ 52 ]               +=      s 82
[ 52 ]                ,      r        <factor>  ->  | <mutable>
[ 52 ]                -      r        <factor>  ->  | <mutable>
[ 52 ]               -=      s 83
[ 52 ]                /      r        <factor>  ->  | <mutable>
[ 52 ]               /=      s 84
[ 52 ]                ;      r        <factor>  ->  | <mutable>
[ 52 ]                <      r        <factor>  ->  | <mutable>
[ 52 ]               <=      r        <factor>  ->  | <mutable>
[ 52 ]                =      s 86
[ 52 ]               ==      r        <factor>  ->  | <mutable>
[ 52 ]                >      r        <factor>  ->  | <mutable>
[ 52 ]               >=      r        <factor>  ->  | <mutable>
[ 52 ]                ]      r        <factor>  ->  | <mutable>
[ 52 ]              and      r        <factor>  ->  | <mutable>
[ 52 ]               or      r        <factor>  ->  | <mutable>
[ 52 ]       <assignop>      goto 85

[ 53 ]                )      r           <exp>  ->  | <simpleExp>
[ 53 ]                ,      r           <exp>  ->  | <simpleExp>
[ 53 ]                ;      r           <exp>  ->  | <simpleExp>
[ 53 ]                ]      r           <exp>  ->  | <simpleExp>
[ 53 ]               or      s 59

[ 54 ]                (      s 20
[ 54 ]                *      s 21
[ 54 ]                -      s 22
[ 54 ]        CHARCONST      s 36
[ 54 ]               ID      s 37
[ 54 ]         NUMCONST      s 38
[ 54 ]      STRINGCONST      s 39
[ 54 ]            false      s 40
[ 54 ]              not      s 41
[ 54 ]             true      s 42
[ 54 ]           <call>      goto 24
[ 54 ]       <constant>      goto 25
[ 54 ]         <factor>      goto 26
[ 54 ]      <immutable>      goto 27
[ 54 ]         <mulExp>      goto 28
[ 54 ]        <mutable>      goto 29
[ 54 ]         <relExp>      goto 30
[ 54 ]         <sumExp>      goto 32
[ 54 ]       <unaryExp>      goto 33
[ 54 ]    <unaryRelExp>      goto 87
[ 54 ]        <unaryop>      goto 35

[ 55 ]                (      r         <mulop>  ->  | %
[ 55 ]                *      r         <mulop>  ->  | %
[ 55 ]                -      r         <mulop>  ->  | %
[ 55 ]        CHARCONST      r         <mulop>  ->  | %
[ 55 ]               ID      r         <mulop>  ->  | %
[ 55 ]         NUMCONST      r         <mulop>  ->  | %
[ 55 ]      STRINGCONST      r         <mulop>  ->  | %
[ 55 ]            false      r         <mulop>  ->  | %
[ 55 ]             true      r         <mulop>  ->  | %

[ 56 ]                (      r         <mulop>  ->  | *
[ 56 ]                *      r         <mulop>  ->  | *
[ 56 ]                -      r         <mulop>  ->  | *
[ 56 ]        CHARCONST      r         <mulop>  ->  | *
[ 56 ]               ID      r         <mulop>  ->  | *
[ 56 ]         NUMCONST      r         <mulop>  ->  | *
[ 56 ]      STRINGCONST      r         <mulop>  ->  | *
[ 56 ]            false      r         <mulop>  ->  | *
[ 56 ]             true      r         <mulop>  ->  | *

[ 57 ]                (      r         <mulop>  ->  | /
[ 57 ]                *      r         <mulop>  ->  | /
[ 57 ]                -      r         <mulop>  ->  | /
[ 57 ]        CHARCONST      r         <mulop>  ->  | /
[ 57 ]               ID      r         <mulop>  ->  | /
[ 57 ]         NUMCONST      r         <mulop>  ->  | /
[ 57 ]      STRINGCONST      r         <mulop>  ->  | /
[ 57 ]            false      r         <mulop>  ->  | /
[ 57 ]             true      r         <mulop>  ->  | /

[ 58 ]                (      s 20
[ 58 ]                *      s 21
[ 58 ]                -      s 22
[ 58 ]        CHARCONST      s 36
[ 58 ]               ID      s 37
[ 58 ]         NUMCONST      s 38
[ 58 ]      STRINGCONST      s 39
[ 58 ]            false      s 40
[ 58 ]             true      s 42
[ 58 ]           <call>      goto 24
[ 58 ]       <constant>      goto 25
[ 58 ]         <factor>      goto 26
[ 58 ]      <immutable>      goto 27
[ 58 ]        <mutable>      goto 29
[ 58 ]       <unaryExp>      goto 88
[ 58 ]        <unaryop>      goto 35

[ 59 ]                (      s 20
[ 59 ]                *      s 21
[ 59 ]                -      s 22
[ 59 ]        CHARCONST      s 36
[ 59 ]               ID      s 37
[ 59 ]         NUMCONST      s 38
[ 59 ]      STRINGCONST      s 39
[ 59 ]            false      s 40
[ 59 ]              not      s 41
[ 59 ]             true      s 42
[ 59 ]         <andExp>      goto 89
[ 59 ]           <call>      goto 24
[ 59 ]       <constant>      goto 25
[ 59 ]         <factor>      goto 26
[ 59 ]      <immutable>      goto 27
[ 59 ]         <mulExp>      goto 28
[ 59 ]        <mutable>      goto 29
[ 59 ]         <relExp>      goto 30
[ 59 ]         <sumExp>      goto 32
[ 59 ]       <unaryExp>      goto 33
[ 59 ]    <unaryRelExp>      goto 34
[ 59 ]        <unaryop>      goto 35

[ 60 ]                (      r         <relop>  ->  | !=
[ 60 ]                *      r         <relop>  ->  | !=
[ 60 ]                -      r         <relop>  ->  | !=
[ 60 ]        CHARCONST      r         <relop>  ->  | !=
[ 60 ]               ID      r         <relop>  ->  | !=
[ 60 ]         NUMCONST      r         <relop>  ->  | !=
[ 60 ]      STRINGCONST      r         <relop>  ->  | !=
[ 60 ]            false      r         <relop>  ->  | !=
[ 60 ]             true      r         <relop>  ->  | !=

[ 61 ]                (      r         <sumop>  ->  | +
[ 61 ]                *      r         <sumop>  ->  | +
[ 61 ]                -      r         <sumop>  ->  | +
[ 61 ]        CHARCONST      r         <sumop>  ->  | +
[ 61 ]               ID      r         <sumop>  ->  | +
[ 61 ]         NUMCONST      r         <sumop>  ->  | +
[ 61 ]      STRINGCONST      r         <sumop>  ->  | +
[ 61 ]            false      r         <sumop>  ->  | +
[ 61 ]             true      r         <sumop>  ->  | +

[ 62 ]                (      r         <sumop>  ->  | -
[ 62 ]                *      r         <sumop>  ->  | -
[ 62 ]                -      r         <sumop>  ->  | -
[ 62 ]        CHARCONST      r         <sumop>  ->  | -
[ 62 ]               ID      r         <sumop>  ->  | -
[ 62 ]         NUMCONST      r         <sumop>  ->  | -
[ 62 ]      STRINGCONST      r         <sumop>  ->  | -
[ 62 ]            false      r         <sumop>  ->  | -
[ 62 ]             true      r         <sumop>  ->  | -

[ 63 ]                (      r         <relop>  ->  | <
[ 63 ]                *      r         <relop>  ->  | <
[ 63 ]                -      r         <relop>  ->  | <
[ 63 ]        CHARCONST      r         <relop>  ->  | <
[ 63 ]               ID      r         <relop>  ->  | <
[ 63 ]         NUMCONST      r         <relop>  ->  | <
[ 63 ]      STRINGCONST      r         <relop>  ->  | <
[ 63 ]            false      r         <relop>  ->  | <
[ 63 ]             true      r         <relop>  ->  | <

[ 64 ]                (      r         <relop>  ->  | <=
[ 64 ]                *      r         <relop>  ->  | <=
[ 64 ]                -      r         <relop>  ->  | <=
[ 64 ]        CHARCONST      r         <relop>  ->  | <=
[ 64 ]               ID      r         <relop>  ->  | <=
[ 64 ]         NUMCONST      r         <relop>  ->  | <=
[ 64 ]      STRINGCONST      r         <relop>  ->  | <=
[ 64 ]            false      r         <relop>  ->  | <=
[ 64 ]             true      r         <relop>  ->  | <=

[ 65 ]                (      s 20
[ 65 ]                *      s 21
[ 65 ]                -      s 22
[ 65 ]        CHARCONST      s 36
[ 65 ]               ID      s 37
[ 65 ]         NUMCONST      s 38
[ 65 ]      STRINGCONST      s 39
[ 65 ]            false      s 40
[ 65 ]             true      s 42
[ 65 ]           <call>      goto 24
[ 65 ]       <constant>      goto 25
[ 65 ]         <factor>      goto 26
[ 65 ]      <immutable>      goto 27
[ 65 ]         <mulExp>      goto 28
[ 65 ]        <mutable>      goto 29
[ 65 ]         <sumExp>      goto 90
[ 65 ]       <unaryExp>      goto 33
[ 65 ]        <unaryop>      goto 35

[ 66 ]                (      s 20
[ 66 ]                *      s 21
[ 66 ]                -      s 22
[ 66 ]        CHARCONST      s 36
[ 66 ]               ID      s 37
[ 66 ]         NUMCONST      s 38
[ 66 ]      STRINGCONST      s 39
[ 66 ]            false      s 40
[ 66 ]             true      s 42
[ 66 ]           <call>      goto 24
[ 66 ]       <constant>      goto 25
[ 66 ]         <factor>      goto 26
[ 66 ]      <immutable>      goto 27
[ 66 ]         <mulExp>      goto 91
[ 66 ]        <mutable>      goto 29
[ 66 ]       <unaryExp>      goto 33
[ 66 ]        <unaryop>      goto 35

[ 67 ]                (      r         <relop>  ->  | ==
[ 67 ]                *      r         <relop>  ->  | ==
[ 67 ]                -      r         <relop>  ->  | ==
[ 67 ]        CHARCONST      r         <relop>  ->  | ==
[ 67 ]               ID      r         <relop>  ->  | ==
[ 67 ]         NUMCONST      r         <relop>  ->  | ==
[ 67 ]      STRINGCONST      r         <relop>  ->  | ==
[ 67 ]            false      r         <relop>  ->  | ==
[ 67 ]             true      r         <relop>  ->  | ==

[ 68 ]                (      r         <relop>  ->  | >
[ 68 ]                *      r         <relop>  ->  | >
[ 68 ]                -      r         <relop>  ->  | >
[ 68 ]        CHARCONST      r         <relop>  ->  | >
[ 68 ]               ID      r         <relop>  ->  | >
[ 68 ]         NUMCONST      r         <relop>  ->  | >
[ 68 ]      STRINGCONST      r         <relop>  ->  | >
[ 68 ]            false      r         <relop>  ->  | >
[ 68 ]             true      r         <relop>  ->  | >

[ 69 ]                (      r         <relop>  ->  | >=
[ 69 ]                *      r         <relop>  ->  | >=
[ 69 ]                -      r         <relop>  ->  | >=
[ 69 ]        CHARCONST      r         <relop>  ->  | >=
[ 69 ]               ID      r         <relop>  ->  | >=
[ 69 ]         NUMCONST      r         <relop>  ->  | >=
[ 69 ]      STRINGCONST      r         <relop>  ->  | >=
[ 69 ]            false      r         <relop>  ->  | >=
[ 69 ]             true      r         <relop>  ->  | >=

[ 70 ]               !=      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                %      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                )      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                *      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                +      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                ,      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                -      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                /      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                ;      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                <      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]               <=      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]               ==      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                >      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]               >=      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]                ]      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]              and      r      <unaryExp>  ->  | <unaryop> <unaryExp>
[ 70 ]               or      r      <unaryExp>  ->  | <unaryop> <unaryExp>

[ 71 ]                (      s 20
[ 71 ]                )      r          <args>  ->  | EMPTY
[ 71 ]                *      s 21
[ 71 ]                -      s 22
[ 71 ]        CHARCONST      s 36
[ 71 ]               ID      s 37
[ 71 ]         NUMCONST      s 38
[ 71 ]      STRINGCONST      s 39
[ 71 ]            false      s 40
[ 71 ]              not      s 41
[ 71 ]             true      s 42
[ 71 ]         <andExp>      goto 23
[ 71 ]        <argList>      goto 92
[ 71 ]           <args>      goto 93
[ 71 ]           <call>      goto 24
[ 71 ]       <constant>      goto 25
[ 71 ]            <exp>      goto 94
[ 71 ]         <factor>      goto 26
[ 71 ]      <immutable>      goto 27
[ 71 ]         <mulExp>      goto 28
[ 71 ]        <mutable>      goto 52
[ 71 ]         <relExp>      goto 30
[ 71 ]      <simpleExp>      goto 53
[ 71 ]         <sumExp>      goto 32
[ 71 ]       <unaryExp>      goto 33
[ 71 ]    <unaryRelExp>      goto 34
[ 71 ]        <unaryop>      goto 35

[ 72 ]                (      s 20
[ 72 ]                *      s 21
[ 72 ]                -      s 22
[ 72 ]        CHARCONST      s 36
[ 72 ]               ID      s 37
[ 72 ]         NUMCONST      s 38
[ 72 ]      STRINGCONST      s 39
[ 72 ]            false      s 40
[ 72 ]              not      s 41
[ 72 ]             true      s 42
[ 72 ]         <andExp>      goto 23
[ 72 ]           <call>      goto 24
[ 72 ]       <constant>      goto 25
[ 72 ]            <exp>      goto 96
[ 72 ]         <factor>      goto 26
[ 72 ]      <immutable>      goto 27
[ 72 ]         <mulExp>      goto 28
[ 72 ]        <mutable>      goto 52
[ 72 ]         <relExp>      goto 30
[ 72 ]      <simpleExp>      goto 53
[ 72 ]         <sumExp>      goto 32
[ 72 ]       <unaryExp>      goto 33
[ 72 ]    <unaryRelExp>      goto 34
[ 72 ]        <unaryop>      goto 35

[ 73 ]                )      r   <unaryRelExp>  ->  | not <unaryRelExp>
[ 73 ]                ,      r   <unaryRelExp>  ->  | not <unaryRelExp>
[ 73 ]                ;      r   <unaryRelExp>  ->  | not <unaryRelExp>
[ 73 ]                ]      r   <unaryRelExp>  ->  | not <unaryRelExp>
[ 73 ]              and      r   <unaryRelExp>  ->  | not <unaryRelExp>
[ 73 ]               or      r   <unaryRelExp>  ->  | not <unaryRelExp>

[ 74 ]             bool      s 7
[ 74 ]             char      s 8
[ 74 ]              int      s 9
[ 74 ]   <parmTypeList>      goto 97
[ 74 ]       <typeSpec>      goto 48

[ 75 ]                {      s 99
[ 75 ]   <compoundStmt>      goto 98

[ 76 ]                )      r    <parmIdList>  ->  | <parmId>
[ 76 ]                ,      r    <parmIdList>  ->  | <parmId>
[ 76 ]                ;      r    <parmIdList>  ->  | <parmId>

[ 77 ]                )      r  <parmTypeList>  ->  | <typeSpec> <parmIdList>
[ 77 ]                ,      s 100
[ 77 ]                ;      r  <parmTypeList>  ->  | <typeSpec> <parmIdList>

[ 78 ]                )      r        <parmId>  ->  | ID
[ 78 ]                ,      r        <parmId>  ->  | ID
[ 78 ]                ;      r        <parmId>  ->  | ID
[ 78 ]                [      s 101

[ 79 ]                ,      r     <varDeclId>  ->  | ID [ NUMCONST ]
[ 79 ]                ;      r     <varDeclId>  ->  | ID [ NUMCONST ]
[ 79 ]                =      r     <varDeclId>  ->  | ID [ NUMCONST ]

[ 80 ]               !=      r     <immutable>  ->  | ( <exp> )
[ 80 ]                %      r     <immutable>  ->  | ( <exp> )
[ 80 ]                )      r     <immutable>  ->  | ( <exp> )
[ 80 ]                *      r     <immutable>  ->  | ( <exp> )
[ 80 ]                +      r     <immutable>  ->  | ( <exp> )
[ 80 ]                ,      r     <immutable>  ->  | ( <exp> )
[ 80 ]                -      r     <immutable>  ->  | ( <exp> )
[ 80 ]                /      r     <immutable>  ->  | ( <exp> )
[ 80 ]                ;      r     <immutable>  ->  | ( <exp> )
[ 80 ]                <      r     <immutable>  ->  | ( <exp> )
[ 80 ]               <=      r     <immutable>  ->  | ( <exp> )
[ 80 ]               ==      r     <immutable>  ->  | ( <exp> )
[ 80 ]                >      r     <immutable>  ->  | ( <exp> )
[ 80 ]               >=      r     <immutable>  ->  | ( <exp> )
[ 80 ]                ]      r     <immutable>  ->  | ( <exp> )
[ 80 ]              and      r     <immutable>  ->  | ( <exp> )
[ 80 ]               or      r     <immutable>  ->  | ( <exp> )

[ 81 ]                (      r      <assignop>  ->  | *=
[ 81 ]                *      r      <assignop>  ->  | *=
[ 81 ]                -      r      <assignop>  ->  | *=
[ 81 ]        CHARCONST      r      <assignop>  ->  | *=
[ 81 ]               ID      r      <assignop>  ->  | *=
[ 81 ]         NUMCONST      r      <assignop>  ->  | *=
[ 81 ]      STRINGCONST      r      <assignop>  ->  | *=
[ 81 ]            false      r      <assignop>  ->  | *=
[ 81 ]              not      r      <assignop>  ->  | *=
[ 81 ]             true      r      <assignop>  ->  | *=

[ 82 ]                (      r      <assignop>  ->  | +=
[ 82 ]                *      r      <assignop>  ->  | +=
[ 82 ]                -      r      <assignop>  ->  | +=
[ 82 ]        CHARCONST      r      <assignop>  ->  | +=
[ 82 ]               ID      r      <assignop>  ->  | +=
[ 82 ]         NUMCONST      r      <assignop>  ->  | +=
[ 82 ]      STRINGCONST      r      <assignop>  ->  | +=
[ 82 ]            false      r      <assignop>  ->  | +=
[ 82 ]              not      r      <assignop>  ->  | +=
[ 82 ]             true      r      <assignop>  ->  | +=

[ 83 ]                (      r      <assignop>  ->  | -=
[ 83 ]                *      r      <assignop>  ->  | -=
[ 83 ]                -      r      <assignop>  ->  | -=
[ 83 ]        CHARCONST      r      <assignop>  ->  | -=
[ 83 ]               ID      r      <assignop>  ->  | -=
[ 83 ]         NUMCONST      r      <assignop>  ->  | -=
[ 83 ]      STRINGCONST      r      <assignop>  ->  | -=
[ 83 ]            false      r      <assignop>  ->  | -=
[ 83 ]              not      r      <assignop>  ->  | -=
[ 83 ]             true      r      <assignop>  ->  | -=

[ 84 ]                (      r      <assignop>  ->  | /=
[ 84 ]                *      r      <assignop>  ->  | /=
[ 84 ]                -      r      <assignop>  ->  | /=
[ 84 ]        CHARCONST      r      <assignop>  ->  | /=
[ 84 ]               ID      r      <assignop>  ->  | /=
[ 84 ]         NUMCONST      r      <assignop>  ->  | /=
[ 84 ]      STRINGCONST      r      <assignop>  ->  | /=
[ 84 ]            false      r      <assignop>  ->  | /=
[ 84 ]              not      r      <assignop>  ->  | /=
[ 84 ]             true      r      <assignop>  ->  | /=

[ 85 ]                (      s 20
[ 85 ]                *      s 21
[ 85 ]                -      s 22
[ 85 ]        CHARCONST      s 36
[ 85 ]               ID      s 37
[ 85 ]         NUMCONST      s 38
[ 85 ]      STRINGCONST      s 39
[ 85 ]            false      s 40
[ 85 ]              not      s 41
[ 85 ]             true      s 42
[ 85 ]         <andExp>      goto 23
[ 85 ]           <call>      goto 24
[ 85 ]       <constant>      goto 25
[ 85 ]            <exp>      goto 102
[ 85 ]         <factor>      goto 26
[ 85 ]      <immutable>      goto 27
[ 85 ]         <mulExp>      goto 28
[ 85 ]        <mutable>      goto 52
[ 85 ]         <relExp>      goto 30
[ 85 ]      <simpleExp>      goto 53
[ 85 ]         <sumExp>      goto 32
[ 85 ]       <unaryExp>      goto 33
[ 85 ]    <unaryRelExp>      goto 34
[ 85 ]        <unaryop>      goto 35

[ 86 ]                (      r      <assignop>  ->  | =
[ 86 ]                *      r      <assignop>  ->  | =
[ 86 ]                -      r      <assignop>  ->  | =
[ 86 ]        CHARCONST      r      <assignop>  ->  | =
[ 86 ]               ID      r      <assignop>  ->  | =
[ 86 ]         NUMCONST      r      <assignop>  ->  | =
[ 86 ]      STRINGCONST      r      <assignop>  ->  | =
[ 86 ]            false      r      <assignop>  ->  | =
[ 86 ]              not      r      <assignop>  ->  | =
[ 86 ]             true      r      <assignop>  ->  | =

[ 87 ]                )      r        <andExp>  ->  | <andExp> and <unaryRelExp>
[ 87 ]                ,      r        <andExp>  ->  | <andExp> and <unaryRelExp>
[ 87 ]                ;      r        <andExp>  ->  | <andExp> and <unaryRelExp>
[ 87 ]                ]      r        <andExp>  ->  | <andExp> and <unaryRelExp>
[ 87 ]              and      r        <andExp>  ->  | <andExp> and <unaryRelExp>
[ 87 ]               or      r        <andExp>  ->  | <andExp> and <unaryRelExp>

[ 88 ]               !=      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                %      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                )      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                *      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                +      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                ,      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                -      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                /      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                ;      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                <      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]               <=      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]               ==      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                >      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]               >=      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]                ]      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]              and      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>
[ 88 ]               or      r        <mulExp>  ->  | <mulExp> <mulop> <unaryExp>

[ 89 ]                )      r     <simpleExp>  ->  | <simpleExp> or <andExp>
[ 89 ]                ,      r     <simpleExp>  ->  | <simpleExp> or <andExp>
[ 89 ]                ;      r     <simpleExp>  ->  | <simpleExp> or <andExp>
[ 89 ]                ]      r     <simpleExp>  ->  | <simpleExp> or <andExp>
[ 89 ]              and      s 54
[ 89 ]               or      r     <simpleExp>  ->  | <simpleExp> or <andExp>

[ 90 ]                )      r        <relExp>  ->  | <sumExp> <relop> <sumExp>
[ 90 ]                +      s 61
[ 90 ]                ,      r        <relExp>  ->  | <sumExp> <relop> <sumExp>
[ 90 ]                -      s 62
[ 90 ]                ;      r        <relExp>  ->  | <sumExp> <relop> <sumExp>
[ 90 ]                ]      r        <relExp>  ->  | <sumExp> <relop> <sumExp>
[ 90 ]              and      r        <relExp>  ->  | <sumExp> <relop> <sumExp>
[ 90 ]               or      r        <relExp>  ->  | <sumExp> <relop> <sumExp>
[ 90 ]          <sumop>      goto 66

[ 91 ]               !=      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]                %      s 55
[ 91 ]                )      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]                *      s 56
[ 91 ]                +      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]                ,      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]                -      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]                /      s 57
[ 91 ]                ;      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]                <      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]               <=      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]               ==      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]                >      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]               >=      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]                ]      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]              and      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]               or      r        <sumExp>  ->  | <sumExp> <sumop> <mulExp>
[ 91 ]          <mulop>      goto 58

[ 92 ]                )      r          <args>  ->  | <argList>
[ 92 ]                ,      s 103

[ 93 ]                )      s 104

[ 94 ]                )      r       <argList>  ->  | <exp>
[ 94 ]                ,      r       <argList>  ->  | <exp>

[ 95 ]                )      r          <args>  ->  | EMPTY

[ 96 ]                ]      s 105

[ 97 ]                )      r      <parmList>  ->  | <parmList> ; <parmTypeList>
[ 97 ]                ;      r      <parmList>  ->  | <parmList> ; <parmTypeList>

[ 98 ]                $      r       <funDecl>  ->  | <typeSpec> ID ( <parms> ) <compoundStmt>
[ 98 ]             bool      r       <funDecl>  ->  | <typeSpec> ID ( <parms> ) <compoundStmt>
[ 98 ]             char      r       <funDecl>  ->  | <typeSpec> ID ( <parms> ) <compoundStmt>
[ 98 ]              int      r       <funDecl>  ->  | <typeSpec> ID ( <parms> ) <compoundStmt>

[ 99 ]                $      r    <localDecls>  ->  | EMPTY
[ 99 ]                (      r    <localDecls>  ->  | EMPTY
[ 99 ]                *      r    <localDecls>  ->  | EMPTY
[ 99 ]                -      r    <localDecls>  ->  | EMPTY
[ 99 ]                ;      r    <localDecls>  ->  | EMPTY
[ 99 ]        CHARCONST      r    <localDecls>  ->  | EMPTY
[ 99 ]               ID      r    <localDecls>  ->  | EMPTY
[ 99 ]         NUMCONST      r    <localDecls>  ->  | EMPTY
[ 99 ]      STRINGCONST      r    <localDecls>  ->  | EMPTY
[ 99 ]             bool      r    <localDecls>  ->  | EMPTY
[ 99 ]            break      r    <localDecls>  ->  | EMPTY
[ 99 ]             char      r    <localDecls>  ->  | EMPTY
[ 99 ]             else      r    <localDecls>  ->  | EMPTY
[ 99 ]            false      r    <localDecls>  ->  | EMPTY
[ 99 ]               if      r    <localDecls>  ->  | EMPTY
[ 99 ]              int      r    <localDecls>  ->  | EMPTY
[ 99 ]              not      r    <localDecls>  ->  | EMPTY
[ 99 ]           return      r    <localDecls>  ->  | EMPTY
[ 99 ]             true      r    <localDecls>  ->  | EMPTY
[ 99 ]            while      r    <localDecls>  ->  | EMPTY
[ 99 ]                {      r    <localDecls>  ->  | EMPTY
[ 99 ]                }      r    <localDecls>  ->  | EMPTY
[ 99 ]     <localDecls>      goto 106

[ 100 ]               ID      s 78
[ 100 ]         <parmId>      goto 108

[ 101 ]                ]      s 109

[ 102 ]                )      r           <exp>  ->  | <mutable> <assignop> <exp>
[ 102 ]                ,      r           <exp>  ->  | <mutable> <assignop> <exp>
[ 102 ]                ;      r           <exp>  ->  | <mutable> <assignop> <exp>
[ 102 ]                ]      r           <exp>  ->  | <mutable> <assignop> <exp>

[ 103 ]                (      s 20
[ 103 ]                *      s 21
[ 103 ]                -      s 22
[ 103 ]        CHARCONST      s 36
[ 103 ]               ID      s 37
[ 103 ]         NUMCONST      s 38
[ 103 ]      STRINGCONST      s 39
[ 103 ]            false      s 40
[ 103 ]              not      s 41
[ 103 ]             true      s 42
[ 103 ]         <andExp>      goto 23
[ 103 ]           <call>      goto 24
[ 103 ]       <constant>      goto 25
[ 103 ]            <exp>      goto 110
[ 103 ]         <factor>      goto 26
[ 103 ]      <immutable>      goto 27
[ 103 ]         <mulExp>      goto 28
[ 103 ]        <mutable>      goto 52
[ 103 ]         <relExp>      goto 30
[ 103 ]      <simpleExp>      goto 53
[ 103 ]         <sumExp>      goto 32
[ 103 ]       <unaryExp>      goto 33
[ 103 ]    <unaryRelExp>      goto 34
[ 103 ]        <unaryop>      goto 35

[ 104 ]               !=      r          <call>  ->  | ID ( <args> )
[ 104 ]                %      r          <call>  ->  | ID ( <args> )
[ 104 ]                )      r          <call>  ->  | ID ( <args> )
[ 104 ]                *      r          <call>  ->  | ID ( <args> )
[ 104 ]                +      r          <call>  ->  | ID ( <args> )
[ 104 ]                ,      r          <call>  ->  | ID ( <args> )
[ 104 ]                -      r          <call>  ->  | ID ( <args> )
[ 104 ]                /      r          <call>  ->  | ID ( <args> )
[ 104 ]                ;      r          <call>  ->  | ID ( <args> )
[ 104 ]                <      r          <call>  ->  | ID ( <args> )
[ 104 ]               <=      r          <call>  ->  | ID ( <args> )
[ 104 ]               ==      r          <call>  ->  | ID ( <args> )
[ 104 ]                >      r          <call>  ->  | ID ( <args> )
[ 104 ]               >=      r          <call>  ->  | ID ( <args> )
[ 104 ]                ]      r          <call>  ->  | ID ( <args> )
[ 104 ]              and      r          <call>  ->  | ID ( <args> )
[ 104 ]               or      r          <call>  ->  | ID ( <args> )

[ 105 ]               !=      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                %      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                )      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                *      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]               *=      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                +      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]               +=      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                ,      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                -      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]               -=      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                /      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]               /=      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                ;      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                <      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]               <=      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                =      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]               ==      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                >      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]               >=      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]                ]      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]              and      r       <mutable>  ->  | ID [ <exp> ]
[ 105 ]               or      r       <mutable>  ->  | ID [ <exp> ]

[ 106 ]                (      r      <stmtList>  ->  | EMPTY
[ 106 ]                *      r      <stmtList>  ->  | EMPTY
[ 106 ]                -      r      <stmtList>  ->  | EMPTY
[ 106 ]                ;      r      <stmtList>  ->  | EMPTY
[ 106 ]        CHARCONST      r      <stmtList>  ->  | EMPTY
[ 106 ]               ID      r      <stmtList>  ->  | EMPTY
[ 106 ]         NUMCONST      r      <stmtList>  ->  | EMPTY
[ 106 ]      STRINGCONST      r      <stmtList>  ->  | EMPTY
[ 106 ]             bool      s 7
[ 106 ]            break      r      <stmtList>  ->  | EMPTY
[ 106 ]             char      s 8
[ 106 ]            false      r      <stmtList>  ->  | EMPTY
[ 106 ]               if      r      <stmtList>  ->  | EMPTY
[ 106 ]              int      s 9
[ 106 ]              not      r      <stmtList>  ->  | EMPTY
[ 106 ]           return      r      <stmtList>  ->  | EMPTY
[ 106 ]             true      r      <stmtList>  ->  | EMPTY
[ 106 ]            while      r      <stmtList>  ->  | EMPTY
[ 106 ]                {      r      <stmtList>  ->  | EMPTY
[ 106 ]                }      r      <stmtList>  ->  | EMPTY
[ 106 ]  <scopedVarDecl>      goto 111
[ 106 ]       <stmtList>      goto 112
[ 106 ]       <typeSpec>      goto 113

[ 107 ]                $      r    <localDecls>  ->  | EMPTY
[ 107 ]                (      r    <localDecls>  ->  | EMPTY
[ 107 ]                *      r    <localDecls>  ->  | EMPTY
[ 107 ]                -      r    <localDecls>  ->  | EMPTY
[ 107 ]                ;      r    <localDecls>  ->  | EMPTY
[ 107 ]        CHARCONST      r    <localDecls>  ->  | EMPTY
[ 107 ]               ID      r    <localDecls>  ->  | EMPTY
[ 107 ]         NUMCONST      r    <localDecls>  ->  | EMPTY
[ 107 ]      STRINGCONST      r    <localDecls>  ->  | EMPTY
[ 107 ]             bool      r    <localDecls>  ->  | EMPTY
[ 107 ]            break      r    <localDecls>  ->  | EMPTY
[ 107 ]             char      r    <localDecls>  ->  | EMPTY
[ 107 ]             else      r    <localDecls>  ->  | EMPTY
[ 107 ]            false      r    <localDecls>  ->  | EMPTY
[ 107 ]               if      r    <localDecls>  ->  | EMPTY
[ 107 ]              int      r    <localDecls>  ->  | EMPTY
[ 107 ]              not      r    <localDecls>  ->  | EMPTY
[ 107 ]           return      r    <localDecls>  ->  | EMPTY
[ 107 ]             true      r    <localDecls>  ->  | EMPTY
[ 107 ]            while      r    <localDecls>  ->  | EMPTY
[ 107 ]                {      r    <localDecls>  ->  | EMPTY
[ 107 ]                }      r    <localDecls>  ->  | EMPTY

[ 108 ]                )      r    <parmIdList>  ->  | <parmIdList> , <parmId>
[ 108 ]                ,      r    <parmIdList>  ->  | <parmIdList> , <parmId>
[ 108 ]                ;      r    <parmIdList>  ->  | <parmIdList> , <parmId>

[ 109 ]                )      r        <parmId>  ->  | ID [ ]
[ 109 ]                ,      r        <parmId>  ->  | ID [ ]
[ 109 ]                ;      r        <parmId>  ->  | ID [ ]

[ 110 ]                )      r       <argList>  ->  | <argList> , <exp>
[ 110 ]                ,      r       <argList>  ->  | <argList> , <exp>

[ 111 ]                $      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]                (      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]                *      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]                -      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]                ;      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]        CHARCONST      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]               ID      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]         NUMCONST      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]      STRINGCONST      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]             bool      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]            break      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]             char      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]             else      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]            false      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]               if      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]              int      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]              not      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]           return      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]             true      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]            while      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]                {      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>
[ 111 ]                }      r    <localDecls>  ->  | <localDecls> <scopedVarDecl>

[ 112 ]                (      s 20
[ 112 ]                *      s 21
[ 112 ]                -      s 22
[ 112 ]                ;      s 115
[ 112 ]        CHARCONST      s 36
[ 112 ]               ID      s 37
[ 112 ]         NUMCONST      s 38
[ 112 ]      STRINGCONST      s 39
[ 112 ]            break      s 124
[ 112 ]            false      s 40
[ 112 ]               if      s 125
[ 112 ]              not      s 41
[ 112 ]           return      s 126
[ 112 ]             true      s 42
[ 112 ]            while      s 127
[ 112 ]                {      s 99
[ 112 ]                }      s 128
[ 112 ]         <andExp>      goto 23
[ 112 ]      <breakStmt>      goto 116
[ 112 ]           <call>      goto 24
[ 112 ]   <compoundStmt>      goto 117
[ 112 ]       <constant>      goto 25
[ 112 ]            <exp>      goto 118
[ 112 ]        <expStmt>      goto 119
[ 112 ]         <factor>      goto 26
[ 112 ]      <immutable>      goto 27
[ 112 ]       <iterStmt>      goto 120
[ 112 ]         <mulExp>      goto 28
[ 112 ]        <mutable>      goto 52
[ 112 ]         <relExp>      goto 30
[ 112 ]     <returnStmt>      goto 121
[ 112 ]     <selectStmt>      goto 122
[ 112 ]      <simpleExp>      goto 53
[ 112 ]           <stmt>      goto 123
[ 112 ]         <sumExp>      goto 32
[ 112 ]       <unaryExp>      goto 33
[ 112 ]    <unaryRelExp>      goto 34
[ 112 ]        <unaryop>      goto 35

[ 113 ]               ID      s 44
[ 113 ]      <varDeclId>      goto 11
[ 113 ]    <varDeclInit>      goto 12
[ 113 ]    <varDeclList>      goto 129

[ 114 ]                (      r      <stmtList>  ->  | EMPTY
[ 114 ]                *      r      <stmtList>  ->  | EMPTY
[ 114 ]                -      r      <stmtList>  ->  | EMPTY
[ 114 ]                ;      r      <stmtList>  ->  | EMPTY
[ 114 ]        CHARCONST      r      <stmtList>  ->  | EMPTY
[ 114 ]               ID      r      <stmtList>  ->  | EMPTY
[ 114 ]         NUMCONST      r      <stmtList>  ->  | EMPTY
[ 114 ]      STRINGCONST      r      <stmtList>  ->  | EMPTY
[ 114 ]            break      r      <stmtList>  ->  | EMPTY
[ 114 ]            false      r      <stmtList>  ->  | EMPTY
[ 114 ]               if      r      <stmtList>  ->  | EMPTY
[ 114 ]              not      r      <stmtList>  ->  | EMPTY
[ 114 ]           return      r      <stmtList>  ->  | EMPTY
[ 114 ]             true      r      <stmtList>  ->  | EMPTY
[ 114 ]            while      r      <stmtList>  ->  | EMPTY
[ 114 ]                {      r      <stmtList>  ->  | EMPTY
[ 114 ]                }      r      <stmtList>  ->  | EMPTY

[ 115 ]                (      r       <expStmt>  ->  | ;
[ 115 ]                *      r       <expStmt>  ->  | ;
[ 115 ]                -      r       <expStmt>  ->  | ;
[ 115 ]                ;      r       <expStmt>  ->  | ;
[ 115 ]        CHARCONST      r       <expStmt>  ->  | ;
[ 115 ]               ID      r       <expStmt>  ->  | ;
[ 115 ]         NUMCONST      r       <expStmt>  ->  | ;
[ 115 ]      STRINGCONST      r       <expStmt>  ->  | ;
[ 115 ]            break      r       <expStmt>  ->  | ;
[ 115 ]             else      r       <expStmt>  ->  | ;
[ 115 ]            false      r       <expStmt>  ->  | ;
[ 115 ]               if      r       <expStmt>  ->  | ;
[ 115 ]              not      r       <expStmt>  ->  | ;
[ 115 ]           return      r       <expStmt>  ->  | ;
[ 115 ]             true      r       <expStmt>  ->  | ;
[ 115 ]            while      r       <expStmt>  ->  | ;
[ 115 ]                {      r       <expStmt>  ->  | ;
[ 115 ]                }      r       <expStmt>  ->  | ;

[ 116 ]                (      r          <stmt>  ->  | <breakStmt>
[ 116 ]                *      r          <stmt>  ->  | <breakStmt>
[ 116 ]                -      r          <stmt>  ->  | <breakStmt>
[ 116 ]                ;      r          <stmt>  ->  | <breakStmt>
[ 116 ]        CHARCONST      r          <stmt>  ->  | <breakStmt>
[ 116 ]               ID      r          <stmt>  ->  | <breakStmt>
[ 116 ]         NUMCONST      r          <stmt>  ->  | <breakStmt>
[ 116 ]      STRINGCONST      r          <stmt>  ->  | <breakStmt>
[ 116 ]            break      r          <stmt>  ->  | <breakStmt>
[ 116 ]             else      r          <stmt>  ->  | <breakStmt>
[ 116 ]            false      r          <stmt>  ->  | <breakStmt>
[ 116 ]               if      r          <stmt>  ->  | <breakStmt>
[ 116 ]              not      r          <stmt>  ->  | <breakStmt>
[ 116 ]           return      r          <stmt>  ->  | <breakStmt>
[ 116 ]             true      r          <stmt>  ->  | <breakStmt>
[ 116 ]            while      r          <stmt>  ->  | <breakStmt>
[ 116 ]                {      r          <stmt>  ->  | <breakStmt>
[ 116 ]                }      r          <stmt>  ->  | <breakStmt>

[ 117 ]                (      r          <stmt>  ->  | <compoundStmt>
[ 117 ]                *      r          <stmt>  ->  | <compoundStmt>
[ 117 ]                -      r          <stmt>  ->  | <compoundStmt>
[ 117 ]                ;      r          <stmt>  ->  | <compoundStmt>
[ 117 ]        CHARCONST      r          <stmt>  ->  | <compoundStmt>
[ 117 ]               ID      r          <stmt>  ->  | <compoundStmt>
[ 117 ]         NUMCONST      r          <stmt>  ->  | <compoundStmt>
[ 117 ]      STRINGCONST      r          <stmt>  ->  | <compoundStmt>
[ 117 ]            break      r          <stmt>  ->  | <compoundStmt>
[ 117 ]             else      r          <stmt>  ->  | <compoundStmt>
[ 117 ]            false      r          <stmt>  ->  | <compoundStmt>
[ 117 ]               if      r          <stmt>  ->  | <compoundStmt>
[ 117 ]              not      r          <stmt>  ->  | <compoundStmt>
[ 117 ]           return      r          <stmt>  ->  | <compoundStmt>
[ 117 ]             true      r          <stmt>  ->  | <compoundStmt>
[ 117 ]            while      r          <stmt>  ->  | <compoundStmt>
[ 117 ]                {      r          <stmt>  ->  | <compoundStmt>
[ 117 ]                }      r          <stmt>  ->  | <compoundStmt>

[ 118 ]                ;      s 130

[ 119 ]                (      r          <stmt>  ->  | <expStmt>
[ 119 ]                *      r          <stmt>  ->  | <expStmt>
[ 119 ]                -      r          <stmt>  ->  | <expStmt>
[ 119 ]                ;      r          <stmt>  ->  | <expStmt>
[ 119 ]        CHARCONST      r          <stmt>  ->  | <expStmt>
[ 119 ]               ID      r          <stmt>  ->  | <expStmt>
[ 119 ]         NUMCONST      r          <stmt>  ->  | <expStmt>
[ 119 ]      STRINGCONST      r          <stmt>  ->  | <expStmt>
[ 119 ]            break      r          <stmt>  ->  | <expStmt>
[ 119 ]             else      r          <stmt>  ->  | <expStmt>
[ 119 ]            false      r          <stmt>  ->  | <expStmt>
[ 119 ]               if      r          <stmt>  ->  | <expStmt>
[ 119 ]              not      r          <stmt>  ->  | <expStmt>
[ 119 ]           return      r          <stmt>  ->  | <expStmt>
[ 119 ]             true      r          <stmt>  ->  | <expStmt>
[ 119 ]            while      r          <stmt>  ->  | <expStmt>
[ 119 ]                {      r          <stmt>  ->  | <expStmt>
[ 119 ]                }      r          <stmt>  ->  | <expStmt>

[ 120 ]                (      r          <stmt>  ->  | <iterStmt>
[ 120 ]                *      r          <stmt>  ->  | <iterStmt>
[ 120 ]                -      r          <stmt>  ->  | <iterStmt>
[ 120 ]                ;      r          <stmt>  ->  | <iterStmt>
[ 120 ]        CHARCONST      r          <stmt>  ->  | <iterStmt>
[ 120 ]               ID      r          <stmt>  ->  | <iterStmt>
[ 120 ]         NUMCONST      r          <stmt>  ->  | <iterStmt>
[ 120 ]      STRINGCONST      r          <stmt>  ->  | <iterStmt>
[ 120 ]            break      r          <stmt>  ->  | <iterStmt>
[ 120 ]             else      r          <stmt>  ->  | <iterStmt>
[ 120 ]            false      r          <stmt>  ->  | <iterStmt>
[ 120 ]               if      r          <stmt>  ->  | <iterStmt>
[ 120 ]              not      r          <stmt>  ->  | <iterStmt>
[ 120 ]           return      r          <stmt>  ->  | <iterStmt>
[ 120 ]             true      r          <stmt>  ->  | <iterStmt>
[ 120 ]            while      r          <stmt>  ->  | <iterStmt>
[ 120 ]                {      r          <stmt>  ->  | <iterStmt>
[ 120 ]                }      r          <stmt>  ->  | <iterStmt>

[ 121 ]                (      r          <stmt>  ->  | <returnStmt>
[ 121 ]                *      r          <stmt>  ->  | <returnStmt>
[ 121 ]                -      r          <stmt>  ->  | <returnStmt>
[ 121 ]                ;      r          <stmt>  ->  | <returnStmt>
[ 121 ]        CHARCONST      r          <stmt>  ->  | <returnStmt>
[ 121 ]               ID      r          <stmt>  ->  | <returnStmt>
[ 121 ]         NUMCONST      r          <stmt>  ->  | <returnStmt>
[ 121 ]      STRINGCONST      r          <stmt>  ->  | <returnStmt>
[ 121 ]            break      r          <stmt>  ->  | <returnStmt>
[ 121 ]             else      r          <stmt>  ->  | <returnStmt>
[ 121 ]            false      r          <stmt>  ->  | <returnStmt>
[ 121 ]               if      r          <stmt>  ->  | <returnStmt>
[ 121 ]              not      r          <stmt>  ->  | <returnStmt>
[ 121 ]           return      r          <stmt>  ->  | <returnStmt>
[ 121 ]             true      r          <stmt>  ->  | <returnStmt>
[ 121 ]            while      r          <stmt>  ->  | <returnStmt>
[ 121 ]                {      r          <stmt>  ->  | <returnStmt>
[ 121 ]                }      r          <stmt>  ->  | <returnStmt>

[ 122 ]                (      r          <stmt>  ->  | <selectStmt>
[ 122 ]                *      r          <stmt>  ->  | <selectStmt>
[ 122 ]                -      r          <stmt>  ->  | <selectStmt>
[ 122 ]                ;      r          <stmt>  ->  | <selectStmt>
[ 122 ]        CHARCONST      r          <stmt>  ->  | <selectStmt>
[ 122 ]               ID      r          <stmt>  ->  | <selectStmt>
[ 122 ]         NUMCONST      r          <stmt>  ->  | <selectStmt>
[ 122 ]      STRINGCONST      r          <stmt>  ->  | <selectStmt>
[ 122 ]            break      r          <stmt>  ->  | <selectStmt>
[ 122 ]             else      r          <stmt>  ->  | <selectStmt>
[ 122 ]            false      r          <stmt>  ->  | <selectStmt>
[ 122 ]               if      r          <stmt>  ->  | <selectStmt>
[ 122 ]              not      r          <stmt>  ->  | <selectStmt>
[ 122 ]           return      r          <stmt>  ->  | <selectStmt>
[ 122 ]             true      r          <stmt>  ->  | <selectStmt>
[ 122 ]            while      r          <stmt>  ->  | <selectStmt>
[ 122 ]                {      r          <stmt>  ->  | <selectStmt>
[ 122 ]                }      r          <stmt>  ->  | <selectStmt>

[ 123 ]                (      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]                *      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]                -      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]                ;      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]        CHARCONST      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]               ID      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]         NUMCONST      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]      STRINGCONST      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]            break      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]            false      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]               if      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]              not      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]           return      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]             true      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]            while      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]                {      r      <stmtList>  ->  | <stmtList> <stmt>
[ 123 ]                }      r      <stmtList>  ->  | <stmtList> <stmt>

[ 124 ]                ;      s 131

[ 125 ]                (      s 132

[ 126 ]                (      s 20
[ 126 ]                *      s 21
[ 126 ]                -      s 22
[ 126 ]                ;      s 133
[ 126 ]        CHARCONST      s 36
[ 126 ]               ID      s 37
[ 126 ]         NUMCONST      s 38
[ 126 ]      STRINGCONST      s 39
[ 126 ]            false      s 40
[ 126 ]              not      s 41
[ 126 ]             true      s 42
[ 126 ]         <andExp>      goto 23
[ 126 ]           <call>      goto 24
[ 126 ]       <constant>      goto 25
[ 126 ]            <exp>      goto 134
[ 126 ]         <factor>      goto 26
[ 126 ]      <immutable>      goto 27
[ 126 ]         <mulExp>      goto 28
[ 126 ]        <mutable>      goto 52
[ 126 ]         <relExp>      goto 30
[ 126 ]      <simpleExp>      goto 53
[ 126 ]         <sumExp>      goto 32
[ 126 ]       <unaryExp>      goto 33
[ 126 ]    <unaryRelExp>      goto 34
[ 126 ]        <unaryop>      goto 35

[ 127 ]                (      s 135

[ 128 ]                $      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]                (      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]                *      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]                -      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]                ;      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]        CHARCONST      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]               ID      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]         NUMCONST      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]      STRINGCONST      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]             bool      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]            break      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]             char      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]             else      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]            false      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]               if      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]              int      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]              not      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]           return      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]             true      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]            while      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]                {      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }
[ 128 ]                }      r  <compoundStmt>  ->  | { <localDecls> <stmtList> }

[ 129 ]                ,      s 16
[ 129 ]                ;      s 136

[ 130 ]                (      r       <expStmt>  ->  | <exp> ;
[ 130 ]                *      r       <expStmt>  ->  | <exp> ;
[ 130 ]                -      r       <expStmt>  ->  | <exp> ;
[ 130 ]                ;      r       <expStmt>  ->  | <exp> ;
[ 130 ]        CHARCONST      r       <expStmt>  ->  | <exp> ;
[ 130 ]               ID      r       <expStmt>  ->  | <exp> ;
[ 130 ]         NUMCONST      r       <expStmt>  ->  | <exp> ;
[ 130 ]      STRINGCONST      r       <expStmt>  ->  | <exp> ;
[ 130 ]            break      r       <expStmt>  ->  | <exp> ;
[ 130 ]             else      r       <expStmt>  ->  | <exp> ;
[ 130 ]            false      r       <expStmt>  ->  | <exp> ;
[ 130 ]               if      r       <expStmt>  ->  | <exp> ;
[ 130 ]              not      r       <expStmt>  ->  | <exp> ;
[ 130 ]           return      r       <expStmt>  ->  | <exp> ;
[ 130 ]             true      r       <expStmt>  ->  | <exp> ;
[ 130 ]            while      r       <expStmt>  ->  | <exp> ;
[ 130 ]                {      r       <expStmt>  ->  | <exp> ;
[ 130 ]                }      r       <expStmt>  ->  | <exp> ;

[ 131 ]                (      r     <breakStmt>  ->  | break ;
[ 131 ]                *      r     <breakStmt>  ->  | break ;
[ 131 ]                -      r     <breakStmt>  ->  | break ;
[ 131 ]                ;      r     <breakStmt>  ->  | break ;
[ 131 ]        CHARCONST      r     <breakStmt>  ->  | break ;
[ 131 ]               ID      r     <breakStmt>  ->  | break ;
[ 131 ]         NUMCONST      r     <breakStmt>  ->  | break ;
[ 131 ]      STRINGCONST      r     <breakStmt>  ->  | break ;
[ 131 ]            break      r     <breakStmt>  ->  | break ;
[ 131 ]             else      r     <breakStmt>  ->  | break ;
[ 131 ]            false      r     <breakStmt>  ->  | break ;
[ 131 ]               if      r     <breakStmt>  ->  | break ;
[ 131 ]              not      r     <breakStmt>  ->  | break ;
[ 131 ]           return      r     <breakStmt>  ->  | break ;
[ 131 ]             true      r     <breakStmt>  ->  | break ;
[ 131 ]            while      r     <breakStmt>  ->  | break ;
[ 131 ]                {      r     <breakStmt>  ->  | break ;
[ 131 ]                }      r     <breakStmt>  ->  | break ;

[ 132 ]                (      s 20
[ 132 ]                *      s 21
[ 132 ]                -      s 22
[ 132 ]        CHARCONST      s 36
[ 132 ]               ID      s 37
[ 132 ]         NUMCONST      s 38
[ 132 ]      STRINGCONST      s 39
[ 132 ]            false      s 40
[ 132 ]              not      s 41
[ 132 ]             true      s 42
[ 132 ]         <andExp>      goto 23
[ 132 ]           <call>      goto 24
[ 132 ]       <constant>      goto 25
[ 132 ]         <factor>      goto 26
[ 132 ]      <immutable>      goto 27
[ 132 ]         <mulExp>      goto 28
[ 132 ]        <mutable>      goto 29
[ 132 ]         <relExp>      goto 30
[ 132 ]      <simpleExp>      goto 137
[ 132 ]         <sumExp>      goto 32
[ 132 ]       <unaryExp>      goto 33
[ 132 ]    <unaryRelExp>      goto 34
[ 132 ]        <unaryop>      goto 35

[ 133 ]                (      r    <returnStmt>  ->  | return ;
[ 133 ]                *      r    <returnStmt>  ->  | return ;
[ 133 ]                -      r    <returnStmt>  ->  | return ;
[ 133 ]                ;      r    <returnStmt>  ->  | return ;
[ 133 ]        CHARCONST      r    <returnStmt>  ->  | return ;
[ 133 ]               ID      r    <returnStmt>  ->  | return ;
[ 133 ]         NUMCONST      r    <returnStmt>  ->  | return ;
[ 133 ]      STRINGCONST      r    <returnStmt>  ->  | return ;
[ 133 ]            break      r    <returnStmt>  ->  | return ;
[ 133 ]             else      r    <returnStmt>  ->  | return ;
[ 133 ]            false      r    <returnStmt>  ->  | return ;
[ 133 ]               if      r    <returnStmt>  ->  | return ;
[ 133 ]              not      r    <returnStmt>  ->  | return ;
[ 133 ]           return      r    <returnStmt>  ->  | return ;
[ 133 ]             true      r    <returnStmt>  ->  | return ;
[ 133 ]            while      r    <returnStmt>  ->  | return ;
[ 133 ]                {      r    <returnStmt>  ->  | return ;
[ 133 ]                }      r    <returnStmt>  ->  | return ;

[ 134 ]                ;      s 138

[ 135 ]                (      s 20
[ 135 ]                *      s 21
[ 135 ]                -      s 22
[ 135 ]        CHARCONST      s 36
[ 135 ]               ID      s 37
[ 135 ]         NUMCONST      s 38
[ 135 ]      STRINGCONST      s 39
[ 135 ]            false      s 40
[ 135 ]              not      s 41
[ 135 ]             true      s 42
[ 135 ]         <andExp>      goto 23
[ 135 ]           <call>      goto 24
[ 135 ]       <constant>      goto 25
[ 135 ]         <factor>      goto 26
[ 135 ]      <immutable>      goto 27
[ 135 ]         <mulExp>      goto 28
[ 135 ]        <mutable>      goto 29
[ 135 ]         <relExp>      goto 30
[ 135 ]      <simpleExp>      goto 139
[ 135 ]         <sumExp>      goto 32
[ 135 ]       <unaryExp>      goto 33
[ 135 ]    <unaryRelExp>      goto 34
[ 135 ]        <unaryop>      goto 35

[ 136 ]                $      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]                (      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]                *      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]                -      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]                ;      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]        CHARCONST      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]               ID      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]         NUMCONST      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]      STRINGCONST      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]             bool      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]            break      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]             char      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]             else      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]            false      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]               if      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]              int      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]              not      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]           return      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]             true      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]            while      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]                {      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;
[ 136 ]                }      r <scopedVarDecl>  ->  | <typeSpec> <varDeclList> ;

[ 137 ]                )      s 140
[ 137 ]               or      s 59

[ 138 ]                (      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]                *      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]                -      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]                ;      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]        CHARCONST      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]               ID      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]         NUMCONST      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]      STRINGCONST      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]            break      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]             else      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]            false      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]               if      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]              not      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]           return      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]             true      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]            while      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]                {      r    <returnStmt>  ->  | return <exp> ;
[ 138 ]                }      r    <returnStmt>  ->  | return <exp> ;

[ 139 ]                )      s 141
[ 139 ]               or      s 59

[ 140 ]             then      s 142

[ 141 ]                (      s 20
[ 141 ]                *      s 21
[ 141 ]                -      s 22
[ 141 ]                ;      s 115
[ 141 ]        CHARCONST      s 36
[ 141 ]               ID      s 37
[ 141 ]         NUMCONST      s 38
[ 141 ]      STRINGCONST      s 39
[ 141 ]            break      s 124
[ 141 ]            false      s 40
[ 141 ]               if      s 125
[ 141 ]              not      s 41
[ 141 ]           return      s 126
[ 141 ]             true      s 42
[ 141 ]            while      s 127
[ 141 ]                {      s 99
[ 141 ]         <andExp>      goto 23
[ 141 ]      <breakStmt>      goto 116
[ 141 ]           <call>      goto 24
[ 141 ]   <compoundStmt>      goto 117
[ 141 ]       <constant>      goto 25
[ 141 ]            <exp>      goto 118
[ 141 ]        <expStmt>      goto 119
[ 141 ]         <factor>      goto 26
[ 141 ]      <immutable>      goto 27
[ 141 ]       <iterStmt>      goto 120
[ 141 ]         <mulExp>      goto 28
[ 141 ]        <mutable>      goto 52
[ 141 ]         <relExp>      goto 30
[ 141 ]     <returnStmt>      goto 121
[ 141 ]     <selectStmt>      goto 122
[ 141 ]      <simpleExp>      goto 53
[ 141 ]           <stmt>      goto 143
[ 141 ]         <sumExp>      goto 32
[ 141 ]       <unaryExp>      goto 33
[ 141 ]    <unaryRelExp>      goto 34
[ 141 ]        <unaryop>      goto 35

[ 142 ]                (      s 20
[ 142 ]                *      s 21
[ 142 ]                -      s 22
[ 142 ]                ;      s 115
[ 142 ]        CHARCONST      s 36
[ 142 ]               ID      s 37
[ 142 ]         NUMCONST      s 38
[ 142 ]      STRINGCONST      s 39
[ 142 ]            break      s 124
[ 142 ]            false      s 40
[ 142 ]               if      s 125
[ 142 ]              not      s 41
[ 142 ]           return      s 126
[ 142 ]             true      s 42
[ 142 ]            while      s 127
[ 142 ]                {      s 99
[ 142 ]         <andExp>      goto 23
[ 142 ]      <breakStmt>      goto 116
[ 142 ]           <call>      goto 24
[ 142 ]   <compoundStmt>      goto 117
[ 142 ]       <constant>      goto 25
[ 142 ]            <exp>      goto 118
[ 142 ]        <expStmt>      goto 119
[ 142 ]         <factor>      goto 26
[ 142 ]      <immutable>      goto 27
[ 142 ]       <iterStmt>      goto 120
[ 142 ]         <mulExp>      goto 28
[ 142 ]        <mutable>      goto 52
[ 142 ]         <relExp>      goto 30
[ 142 ]     <returnStmt>      goto 121
[ 142 ]     <selectStmt>      goto 122
[ 142 ]      <simpleExp>      goto 53
[ 142 ]           <stmt>      goto 144
[ 142 ]         <sumExp>      goto 32
[ 142 ]       <unaryExp>      goto 33
[ 142 ]    <unaryRelExp>      goto 34
[ 142 ]        <unaryop>      goto 35

[ 143 ]                (      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]                *      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]                -      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]                ;      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]        CHARCONST      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]               ID      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]         NUMCONST      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]      STRINGCONST      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]            break      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]             else      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]            false      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]               if      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]              not      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]           return      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]             true      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]            while      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]                {      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>
[ 143 ]                }      r      <iterStmt>  ->  | while ( <simpleExp> ) <stmt>

[ 144 ]                (      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]                *      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]                -      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]                ;      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]        CHARCONST      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]               ID      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]         NUMCONST      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]      STRINGCONST      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]            break      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]             else      s 145
[ 144 ]            false      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]               if      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]              not      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]           return      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]             true      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]            while      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]                {      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>
[ 144 ]                }      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt>

[ 145 ]                (      s 20
[ 145 ]                *      s 21
[ 145 ]                -      s 22
[ 145 ]                ;      s 115
[ 145 ]        CHARCONST      s 36
[ 145 ]               ID      s 37
[ 145 ]         NUMCONST      s 38
[ 145 ]      STRINGCONST      s 39
[ 145 ]            break      s 124
[ 145 ]            false      s 40
[ 145 ]               if      s 125
[ 145 ]              not      s 41
[ 145 ]           return      s 126
[ 145 ]             true      s 42
[ 145 ]            while      s 127
[ 145 ]                {      s 99
[ 145 ]         <andExp>      goto 23
[ 145 ]      <breakStmt>      goto 116
[ 145 ]           <call>      goto 24
[ 145 ]   <compoundStmt>      goto 117
[ 145 ]       <constant>      goto 25
[ 145 ]            <exp>      goto 118
[ 145 ]        <expStmt>      goto 119
[ 145 ]         <factor>      goto 26
[ 145 ]      <immutable>      goto 27
[ 145 ]       <iterStmt>      goto 120
[ 145 ]         <mulExp>      goto 28
[ 145 ]        <mutable>      goto 52
[ 145 ]         <relExp>      goto 30
[ 145 ]     <returnStmt>      goto 121
[ 145 ]     <selectStmt>      goto 122
[ 145 ]      <simpleExp>      goto 53
[ 145 ]           <stmt>      goto 146
[ 145 ]         <sumExp>      goto 32
[ 145 ]       <unaryExp>      goto 33
[ 145 ]    <unaryRelExp>      goto 34
[ 145 ]        <unaryop>      goto 35

[ 146 ]                (      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]                *      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]                -      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]                ;      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]        CHARCONST      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]               ID      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]         NUMCONST      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]      STRINGCONST      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]            break      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]             else      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]            false      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]               if      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]              not      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]           return      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]             true      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]            while      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]                {      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>
[ 146 ]                }      r    <selectStmt>  ->  | if ( <simpleExp> ) then <stmt> else <stmt>

=================== parse =====================
0 9 	int 

0 5 	<typeSpec> 

0 5 14 	<typeSpec> ID 

0 5 14 18 	<typeSpec> ID ( 

0 5 14 18 9 	<typeSpec> ID ( int 

0 5 14 18 48 	<typeSpec> ID ( <typeSpec> 

0 5 14 18 48 78 	<typeSpec> ID ( <typeSpec> ID 

0 5 14 18 48 76 	<typeSpec> ID ( <typeSpec> <parmId> 

0 5 14 18 48 77 	<typeSpec> ID ( <typeSpec> <parmIdList> 

0 5 14 18 48 77 100 	<typeSpec> ID ( <typeSpec> <parmIdList> , 

0 5 14 18 48 77 100 78 	<typeSpec> ID ( <typeSpec> <parmIdList> , ID 

0 5 14 18 48 77 100 108 	<typeSpec> ID ( <typeSpec> <parmIdList> , <parmId> 

0 5 14 18 48 77 	<typeSpec> ID ( <typeSpec> <parmIdList> 

0 5 14 18 48 77 100 	<typeSpec> ID ( <typeSpec> <parmIdList> , 

0 5 14 18 48 77 100 78 	<typeSpec> ID ( <typeSpec> <parmIdList> , ID 

0 5 14 18 48 77 100 108 	<typeSpec> ID ( <typeSpec> <parmIdList> , <parmId> 

0 5 14 18 48 77 	<typeSpec> ID ( <typeSpec> <parmIdList> 

0 5 14 18 46 	<typeSpec> ID ( <parmTypeList> 

0 5 14 18 45 	<typeSpec> ID ( <parmList> 

0 5 14 18 47 	<typeSpec> ID ( <parms> 

0 5 14 18 47 75 	<typeSpec> ID ( <parms> ) 

0 5 14 18 47 75 99 	<typeSpec> ID ( <parms> ) { 

0 5 14 18 47 75 99 106 	<typeSpec> ID ( <parms> ) { <localDecls> 

0 5 14 18 47 75 99 106 112 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> 

0 5 14 18 47 75 99 106 112 126 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return 

0 5 14 18 47 75 99 106 112 126 37 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return ID 

0 5 14 18 47 75 99 106 112 126 52 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <mutable> 

0 5 14 18 47 75 99 106 112 126 26 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <factor> 

0 5 14 18 47 75 99 106 112 126 33 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <unaryExp> 

0 5 14 18 47 75 99 106 112 126 28 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <mulExp> 

0 5 14 18 47 75 99 106 112 126 32 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> 

0 5 14 18 47 75 99 106 112 126 32 61 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> + 

0 5 14 18 47 75 99 106 112 126 32 66 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> 

0 5 14 18 47 75 99 106 112 126 32 66 37 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> ID 

0 5 14 18 47 75 99 106 112 126 32 66 29 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <mutable> 

0 5 14 18 47 75 99 106 112 126 32 66 26 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <factor> 

0 5 14 18 47 75 99 106 112 126 32 66 33 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <unaryExp> 

0 5 14 18 47 75 99 106 112 126 32 66 91 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <mulExp> 

0 5 14 18 47 75 99 106 112 126 32 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> 

0 5 14 18 47 75 99 106 112 126 32 61 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> + 

0 5 14 18 47 75 99 106 112 126 32 66 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> 

0 5 14 18 47 75 99 106 112 126 32 66 37 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> ID 

0 5 14 18 47 75 99 106 112 126 32 66 29 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <mutable> 

0 5 14 18 47 75 99 106 112 126 32 66 26 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <factor> 

0 5 14 18 47 75 99 106 112 126 32 66 33 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <unaryExp> 

0 5 14 18 47 75 99 106 112 126 32 66 91 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <mulExp> 

0 5 14 18 47 75 99 106 112 126 32 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> 

0 5 14 18 47 75 99 106 112 126 30 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <relExp> 

0 5 14 18 47 75 99 106 112 126 34 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <unaryRelExp> 

0 5 14 18 47 75 99 106 112 126 23 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <andExp> 

0 5 14 18 47 75 99 106 112 126 53 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <simpleExp> 

0 5 14 18 47 75 99 106 112 126 134 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <exp> 

0 5 14 18 47 75 99 106 112 126 134 138 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <exp> ; 

0 5 14 18 47 75 99 106 112 121 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <returnStmt> 

0 5 14 18 47 75 99 106 112 123 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <stmt> 

0 5 14 18 47 75 99 106 112 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> 

0 5 14 18 47 75 99 106 112 128 	<typeSpec> ID ( <parms> ) { <localDecls> <stmtList> } 

0 5 14 18 47 75 98 	<typeSpec> ID ( <parms> ) <compoundStmt> 

0 3 	<funDecl> 

0 1 	<decl> 

0 2 	<declList> 

0 2 9 	<declList> int 

0 2 5 	<declList> <typeSpec> 

0 2 5 14 	<declList> <typeSpec> ID 

0 2 5 14 18 	<declList> <typeSpec> ID ( 

0 2 5 14 18 9 	<declList> <typeSpec> ID ( int 

0 2 5 14 18 48 	<declList> <typeSpec> ID ( <typeSpec> 

0 2 5 14 18 48 78 	<declList> <typeSpec> ID ( <typeSpec> ID 

0 2 5 14 18 48 76 	<declList> <typeSpec> ID ( <typeSpec> <parmId> 

0 2 5 14 18 48 77 	<declList> <typeSpec> ID ( <typeSpec> <parmIdList> 

0 2 5 14 18 46 	<declList> <typeSpec> ID ( <parmTypeList> 

0 2 5 14 18 45 	<declList> <typeSpec> ID ( <parmList> 

0 2 5 14 18 45 74 	<declList> <typeSpec> ID ( <parmList> ; 

0 2 5 14 18 45 74 8 	<declList> <typeSpec> ID ( <parmList> ; char 

0 2 5 14 18 45 74 48 	<declList> <typeSpec> ID ( <parmList> ; <typeSpec> 

0 2 5 14 18 45 74 48 78 	<declList> <typeSpec> ID ( <parmList> ; <typeSpec> ID 

0 2 5 14 18 45 74 48 78 101 	<declList> <typeSpec> ID ( <parmList> ; <typeSpec> ID [ 

0 2 5 14 18 45 74 48 78 101 109 	<declList> <typeSpec> ID ( <parmList> ; <typeSpec> ID [ ] 

0 2 5 14 18 45 74 48 76 	<declList> <typeSpec> ID ( <parmList> ; <typeSpec> <parmId> 

0 2 5 14 18 45 74 48 77 	<declList> <typeSpec> ID ( <parmList> ; <typeSpec> <parmIdList> 

0 2 5 14 18 45 74 97 	<declList> <typeSpec> ID ( <parmList> ; <parmTypeList> 

0 2 5 14 18 45 	<declList> <typeSpec> ID ( <parmList> 

0 2 5 14 18 47 	<declList> <typeSpec> ID ( <parms> 

0 2 5 14 18 47 75 	<declList> <typeSpec> ID ( <parms> ) 

0 2 5 14 18 47 75 99 	<declList> <typeSpec> ID ( <parms> ) { 

0 2 5 14 18 47 75 99 106 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> 

0 2 5 14 18 47 75 99 106 8 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> char 

0 2 5 14 18 47 75 99 106 113 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> 

0 2 5 14 18 47 75 99 106 113 44 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> ID 

0 2 5 14 18 47 75 99 106 113 44 19 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> ID [ 

0 2 5 14 18 47 75 99 106 113 44 19 50 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> ID [ NUMCONST 

0 2 5 14 18 47 75 99 106 113 44 19 50 79 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> ID [ NUMCONST ] 

0 2 5 14 18 47 75 99 106 113 11 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> 

0 2 5 14 18 47 75 99 106 113 11 15 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = 

0 2 5 14 18 47 75 99 106 113 11 15 39 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = STRINGCONST 

0 2 5 14 18 47 75 99 106 113 11 15 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = <constant> 

0 2 5 14 18 47 75 99 106 113 11 15 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = <immutable> 

0 2 5 14 18 47 75 99 106 113 11 15 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = <factor> 

0 2 5 14 18 47 75 99 106 113 11 15 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = <unaryExp> 

0 2 5 14 18 47 75 99 106 113 11 15 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = <mulExp> 

0 2 5 14 18 47 75 99 106 113 11 15 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = <sumExp> 

0 2 5 14 18 47 75 99 106 113 11 15 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = <relExp> 

0 2 5 14 18 47 75 99 106 113 11 15 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = <unaryRelExp> 

0 2 5 14 18 47 75 99 106 113 11 15 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = <andExp> 

0 2 5 14 18 47 75 99 106 113 11 15 31 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> = <simpleExp> 

0 2 5 14 18 47 75 99 106 113 12 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclInit> 

0 2 5 14 18 47 75 99 106 113 129 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> 

0 2 5 14 18 47 75 99 106 113 129 136 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> ; 

0 2 5 14 18 47 75 99 106 111 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <scopedVarDecl> 

0 2 5 14 18 47 75 99 106 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> 

0 2 5 14 18 47 75 99 106 9 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> int 

0 2 5 14 18 47 75 99 106 113 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> 

0 2 5 14 18 47 75 99 106 113 44 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> ID 

0 2 5 14 18 47 75 99 106 113 11 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclId> 

0 2 5 14 18 47 75 99 106 113 12 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclInit> 

0 2 5 14 18 47 75 99 106 113 129 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> 

0 2 5 14 18 47 75 99 106 113 129 16 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> , 

0 2 5 14 18 47 75 99 106 113 129 16 44 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> , ID 

0 2 5 14 18 47 75 99 106 113 129 16 11 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> , <varDeclId> 

0 2 5 14 18 47 75 99 106 113 129 16 43 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> , <varDeclInit> 

0 2 5 14 18 47 75 99 106 113 129 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> 

0 2 5 14 18 47 75 99 106 113 129 16 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> , 

0 2 5 14 18 47 75 99 106 113 129 16 44 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> , ID 

0 2 5 14 18 47 75 99 106 113 129 16 11 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> , <varDeclId> 

0 2 5 14 18 47 75 99 106 113 129 16 43 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> , <varDeclInit> 

0 2 5 14 18 47 75 99 106 113 129 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> 

0 2 5 14 18 47 75 99 106 113 129 136 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <typeSpec> <varDeclList> ; 

0 2 5 14 18 47 75 99 106 111 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <scopedVarDecl> 

0 2 5 14 18 47 75 99 106 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> 

0 2 5 14 18 47 75 99 106 112 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> 

0 2 5 14 18 47 75 99 106 112 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> ID 

0 2 5 14 18 47 75 99 106 112 52 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> 

0 2 5 14 18 47 75 99 106 112 52 86 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> = 

0 2 5 14 18 47 75 99 106 112 52 85 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> 

0 2 5 14 18 47 75 99 106 112 52 85 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 52 85 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <constant> 

0 2 5 14 18 47 75 99 106 112 52 85 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> 

0 2 5 14 18 47 75 99 106 112 52 85 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <relExp> 

0 2 5 14 18 47 75 99 106 112 52 85 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryRelExp> 

0 2 5 14 18 47 75 99 106 112 52 85 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <andExp> 

0 2 5 14 18 47 75 99 106 112 52 85 53 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <simpleExp> 

0 2 5 14 18 47 75 99 106 112 52 85 102 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <exp> 

0 2 5 14 18 47 75 99 106 112 118 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <exp> 

0 2 5 14 18 47 75 99 106 112 118 130 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <exp> ; 

0 2 5 14 18 47 75 99 106 112 119 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <expStmt> 

0 2 5 14 18 47 75 99 106 112 123 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <stmt> 

0 2 5 14 18 47 75 99 106 112 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> 

0 2 5 14 18 47 75 99 106 112 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> ID 

0 2 5 14 18 47 75 99 106 112 52 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> 

0 2 5 14 18 47 75 99 106 112 52 86 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> = 

0 2 5 14 18 47 75 99 106 112 52 85 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> 

0 2 5 14 18 47 75 99 106 112 52 85 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 52 85 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <constant> 

0 2 5 14 18 47 75 99 106 112 52 85 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> 

0 2 5 14 18 47 75 99 106 112 52 85 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <relExp> 

0 2 5 14 18 47 75 99 106 112 52 85 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryRelExp> 

0 2 5 14 18 47 75 99 106 112 52 85 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <andExp> 

0 2 5 14 18 47 75 99 106 112 52 85 53 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <simpleExp> 

0 2 5 14 18 47 75 99 106 112 52 85 102 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <exp> 

0 2 5 14 18 47 75 99 106 112 118 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <exp> 

0 2 5 14 18 47 75 99 106 112 118 130 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <exp> ; 

0 2 5 14 18 47 75 99 106 112 119 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <expStmt> 

0 2 5 14 18 47 75 99 106 112 123 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <stmt> 

0 2 5 14 18 47 75 99 106 112 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> 

0 2 5 14 18 47 75 99 106 112 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> ID 

0 2 5 14 18 47 75 99 106 112 52 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> 

0 2 5 14 18 47 75 99 106 112 52 86 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> = 

0 2 5 14 18 47 75 99 106 112 52 85 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> 

0 2 5 14 18 47 75 99 106 112 52 85 20 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( 

0 2 5 14 18 47 75 99 106 112 52 85 20 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( NUMCONST 

0 2 5 14 18 47 75 99 106 112 52 85 20 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <constant> 

0 2 5 14 18 47 75 99 106 112 52 85 20 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 20 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 20 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 61 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> + 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> <constant> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 91 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 61 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> + 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> <constant> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 66 91 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> <sumop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <sumExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <relExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <unaryRelExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <andExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 53 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <simpleExp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 51 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <exp> 

0 2 5 14 18 47 75 99 106 112 52 85 20 51 80 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> ( <exp> ) 

0 2 5 14 18 47 75 99 106 112 52 85 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 28 57 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> / 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <constant> 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 88 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 28 57 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> / 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <constant> 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 28 58 88 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 61 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> + 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 22 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( - 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 35 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <unaryop> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 35 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <unaryop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 35 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <unaryop> <constant> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 35 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <unaryop> <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 35 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <unaryop> <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 35 70 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <unaryop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 28 57 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <mulExp> / 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 28 58 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <mulExp> <mulop> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 28 58 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <mulExp> <mulop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 28 58 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <mulExp> <mulop> <constant> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 28 58 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <mulExp> <mulop> <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 28 58 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <mulExp> <mulop> <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 28 58 88 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <mulExp> <mulop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <sumExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <relExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <unaryRelExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <andExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 53 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <simpleExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 51 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <exp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 20 51 80 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> ( <exp> ) 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <immutable> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <factor> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 66 91 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 52 85 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> 

0 2 5 14 18 47 75 99 106 112 52 85 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <relExp> 

0 2 5 14 18 47 75 99 106 112 52 85 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryRelExp> 

0 2 5 14 18 47 75 99 106 112 52 85 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <andExp> 

0 2 5 14 18 47 75 99 106 112 52 85 53 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <simpleExp> 

0 2 5 14 18 47 75 99 106 112 52 85 102 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <mutable> <assignop> <exp> 

0 2 5 14 18 47 75 99 106 112 118 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <exp> 

0 2 5 14 18 47 75 99 106 112 118 130 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <exp> ; 

0 2 5 14 18 47 75 99 106 112 119 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <expStmt> 

0 2 5 14 18 47 75 99 106 112 123 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <stmt> 

0 2 5 14 18 47 75 99 106 112 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> 

0 2 5 14 18 47 75 99 106 112 127 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while 

0 2 5 14 18 47 75 99 106 112 127 135 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( 

0 2 5 14 18 47 75 99 106 112 127 135 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( ID 

0 2 5 14 18 47 75 99 106 112 127 135 29 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <mutable> 

0 2 5 14 18 47 75 99 106 112 127 135 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <factor> 

0 2 5 14 18 47 75 99 106 112 127 135 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <unaryExp> 

0 2 5 14 18 47 75 99 106 112 127 135 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <mulExp> 

0 2 5 14 18 47 75 99 106 112 127 135 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <sumExp> 

0 2 5 14 18 47 75 99 106 112 127 135 32 69 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <sumExp> >= 

0 2 5 14 18 47 75 99 106 112 127 135 32 65 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <sumExp> <relop> 

0 2 5 14 18 47 75 99 106 112 127 135 32 65 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <sumExp> <relop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 127 135 32 65 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <sumExp> <relop> <constant> 

0 2 5 14 18 47 75 99 106 112 127 135 32 65 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <sumExp> <relop> <immutable> 

0 2 5 14 18 47 75 99 106 112 127 135 32 65 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <sumExp> <relop> <factor> 

0 2 5 14 18 47 75 99 106 112 127 135 32 65 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <sumExp> <relop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 127 135 32 65 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <sumExp> <relop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 127 135 32 65 90 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <sumExp> <relop> <sumExp> 

0 2 5 14 18 47 75 99 106 112 127 135 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <relExp> 

0 2 5 14 18 47 75 99 106 112 127 135 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <unaryRelExp> 

0 2 5 14 18 47 75 99 106 112 127 135 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <andExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> ID 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 86 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> = 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> ID 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 52 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mutable> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <factor> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 61 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> + 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <constant> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <immutable> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <factor> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 91 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <relExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryRelExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <andExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 53 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <simpleExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 102 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <exp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 118 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <exp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 118 130 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <exp> ; 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 119 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <expStmt> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 123 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <stmt> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> ID 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 86 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> = 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> ID 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 52 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mutable> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <factor> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 28 56 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> * 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 28 58 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 28 58 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> ID 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 28 58 29 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <mutable> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 28 58 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <factor> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 28 58 88 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> <mulop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <relExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryRelExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <andExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 53 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <simpleExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 102 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <exp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 118 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <exp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 118 130 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <exp> ; 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 119 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <expStmt> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 123 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <stmt> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> ID 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 86 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> = 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> ID 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 52 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mutable> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <factor> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 62 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> - 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 38 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> NUMCONST 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 25 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <constant> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 27 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <immutable> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <factor> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 66 91 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> <sumop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <sumExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <relExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <unaryRelExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <andExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 53 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <simpleExp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 52 85 102 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <mutable> <assignop> <exp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 118 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <exp> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 118 130 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <exp> ; 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 119 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <expStmt> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 123 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> <stmt> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 99 106 112 128 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) { <localDecls> <stmtList> } 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 117 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) <compoundStmt> 

0 2 5 14 18 47 75 99 106 112 127 135 139 141 143 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> while ( <simpleExp> ) <stmt> 

0 2 5 14 18 47 75 99 106 112 120 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <iterStmt> 

0 2 5 14 18 47 75 99 106 112 123 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <stmt> 

0 2 5 14 18 47 75 99 106 112 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> 

0 2 5 14 18 47 75 99 106 112 126 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return 

0 2 5 14 18 47 75 99 106 112 126 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return ID 

0 2 5 14 18 47 75 99 106 112 126 52 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <mutable> 

0 2 5 14 18 47 75 99 106 112 126 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <factor> 

0 2 5 14 18 47 75 99 106 112 126 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <unaryExp> 

0 2 5 14 18 47 75 99 106 112 126 28 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <mulExp> 

0 2 5 14 18 47 75 99 106 112 126 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> 

0 2 5 14 18 47 75 99 106 112 126 32 61 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> + 

0 2 5 14 18 47 75 99 106 112 126 32 66 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> 

0 2 5 14 18 47 75 99 106 112 126 32 66 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> ID 

0 2 5 14 18 47 75 99 106 112 126 32 66 29 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <mutable> 

0 2 5 14 18 47 75 99 106 112 126 32 66 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <factor> 

0 2 5 14 18 47 75 99 106 112 126 32 66 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 126 32 66 91 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 126 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> 

0 2 5 14 18 47 75 99 106 112 126 32 61 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> + 

0 2 5 14 18 47 75 99 106 112 126 32 66 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> 

0 2 5 14 18 47 75 99 106 112 126 32 66 37 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> ID 

0 2 5 14 18 47 75 99 106 112 126 32 66 29 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <mutable> 

0 2 5 14 18 47 75 99 106 112 126 32 66 26 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <factor> 

0 2 5 14 18 47 75 99 106 112 126 32 66 33 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <unaryExp> 

0 2 5 14 18 47 75 99 106 112 126 32 66 91 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> <sumop> <mulExp> 

0 2 5 14 18 47 75 99 106 112 126 32 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <sumExp> 

0 2 5 14 18 47 75 99 106 112 126 30 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <relExp> 

0 2 5 14 18 47 75 99 106 112 126 34 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <unaryRelExp> 

0 2 5 14 18 47 75 99 106 112 126 23 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <andExp> 

0 2 5 14 18 47 75 99 106 112 126 53 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <simpleExp> 

0 2 5 14 18 47 75 99 106 112 126 134 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <exp> 

0 2 5 14 18 47 75 99 106 112 126 134 138 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> return <exp> ; 

0 2 5 14 18 47 75 99 106 112 121 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <returnStmt> 

0 2 5 14 18 47 75 99 106 112 123 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> <stmt> 

0 2 5 14 18 47 75 99 106 112 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> 

0 2 5 14 18 47 75 99 106 112 128 	<declList> <typeSpec> ID ( <parms> ) { <localDecls> <stmtList> } 

0 2 5 14 18 47 75 98 	<declList> <typeSpec> ID ( <parms> ) <compoundStmt> 

0 2 3 	<declList> <funDecl> 

0 2 10 	<declList> <decl> 

0 2 	<declList> 

0 4 	<program> 

=================== tree ======================
<program>[
  <declList>[
    <declList>[
      <decl>[
        <funDecl>[
          <typeSpec>[
            int
          ]
          fun
          (
          <parms>[
            <parmList>[
              <parmTypeList>[
                <typeSpec>[
                  int
                ]
                <parmIdList>[
                  <parmIdList>[
                    <parmIdList>[
                      <parmId>[
                        a
                      ]
                    ]
                    ,
                    <parmId>[
                      b
                    ]
                  ]
                  ,
                  <parmId>[
                    c
                  ]
                ]
              ]
            ]
          ]
          )
          <compoundStmt>[
            {
            <localDecls>
            <stmtList>[
              <stmtList>
              <stmt>[
                <returnStmt>[
                  return
                  <exp>[
                    <simpleExp>[
                      <andExp>[
                        <unaryRelExp>[
                          <relExp>[
                            <sumExp>[
                              <sumExp>[
                                <sumExp>[
                                  <mulExp>[
                                    <unaryExp>[
                                      <factor>[
                                        <mutable>[
                                          a
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                                <sumop>[
                                  +
                                ]
                                <mulExp>[
                                  <unaryExp>[
                                    <factor>[
                                      <mutable>[
                                        b
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                              <sumop>[
                                +
                              ]
                              <mulExp>[
                                <unaryExp>[
                                  <factor>[
                                    <mutable>[
                                      c
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                  ;
                ]
              ]
            ]
            }
          ]
        ]
      ]
    ]
    <decl>[
      <funDecl>[
        <typeSpec>[
          int
        ]
        main
        (
        <parms>[
          <parmList>[
            <parmList>[
              <parmTypeList>[
                <typeSpec>[
                  int
                ]
                <parmIdList>[
                  <parmId>[
                    argc
                  ]
                ]
              ]
            ]
            ;
            <parmTypeList>[
              <typeSpec>[
                char
              ]
              <parmIdList>[
                <parmId>[
                  argv
                  [
                  ]
                ]
              ]
            ]
          ]
        ]
        )
        <compoundStmt>[
          {
          <localDecls>[
            <localDecls>[
              <localDecls>
              <scopedVarDecl>[
                <typeSpec>[
                  char
                ]
                <varDeclList>[
                  <varDeclInit>[
                    <varDeclId>[
                      str
                      [
                      20
                      ]
                    ]
                    =
                    <simpleExp>[
                      <andExp>[
                        <unaryRelExp>[
                          <relExp>[
                            <sumExp>[
                              <mulExp>[
                                <unaryExp>[
                                  <factor>[
                                    <immutable>[
                                      <constant>[
                                        "this is a string"
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
                ;
              ]
            ]
            <scopedVarDecl>[
              <typeSpec>[
                int
              ]
              <varDeclList>[
                <varDeclList>[
                  <varDeclList>[
                    <varDeclInit>[
                      <varDeclId>[
                        a
                      ]
                    ]
                  ]
                  ,
                  <varDeclInit>[
                    <varDeclId>[
                      b
                    ]
                  ]
                ]
                ,
                <varDeclInit>[
                  <varDeclId>[
                    c
                  ]
                ]
              ]
              ;
            ]
          ]
          <stmtList>[
            <stmtList>[
              <stmtList>[
                <stmtList>[
                  <stmtList>[
                    <stmtList>
                    <stmt>[
                      <expStmt>[
                        <exp>[
                          <mutable>[
                            a
                          ]
                          <assignop>[
                            =
                          ]
                          <exp>[
                            <simpleExp>[
                              <andExp>[
                                <unaryRelExp>[
                                  <relExp>[
                                    <sumExp>[
                                      <mulExp>[
                                        <unaryExp>[
                                          <factor>[
                                            <immutable>[
                                              <constant>[
                                                10
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                        ;
                      ]
                    ]
                  ]
                  <stmt>[
                    <expStmt>[
                      <exp>[
                        <mutable>[
                          b
                        ]
                        <assignop>[
                          =
                        ]
                        <exp>[
                          <simpleExp>[
                            <andExp>[
                              <unaryRelExp>[
                                <relExp>[
                                  <sumExp>[
                                    <mulExp>[
                                      <unaryExp>[
                                        <factor>[
                                          <immutable>[
                                            <constant>[
                                              0
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                      ;
                    ]
                  ]
                ]
                <stmt>[
                  <expStmt>[
                    <exp>[
                      <mutable>[
                        c
                      ]
                      <assignop>[
                        =
                      ]
                      <exp>[
                        <simpleExp>[
                          <andExp>[
                            <unaryRelExp>[
                              <relExp>[
                                <sumExp>[
                                  <sumExp>[
                                    <mulExp>[
                                      <mulExp>[
                                        <mulExp>[
                                          <unaryExp>[
                                            <factor>[
                                              <immutable>[
                                                (
                                                <exp>[
                                                  <simpleExp>[
                                                    <andExp>[
                                                      <unaryRelExp>[
                                                        <relExp>[
                                                          <sumExp>[
                                                            <sumExp>[
                                                              <sumExp>[
                                                                <mulExp>[
                                                                  <unaryExp>[
                                                                    <factor>[
                                                                      <immutable>[
                                                                        <constant>[
                                                                          1
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                              <sumop>[
                                                                +
                                                              ]
                                                              <mulExp>[
                                                                <unaryExp>[
                                                                  <factor>[
                                                                    <immutable>[
                                                                      <constant>[
                                                                        5
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                            <sumop>[
                                                              +
                                                            ]
                                                            <mulExp>[
                                                              <unaryExp>[
                                                                <factor>[
                                                                  <immutable>[
                                                                    <constant>[
                                                                      10
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                                )
                                              ]
                                            ]
                                          ]
                                        ]
                                        <mulop>[
                                          /
                                        ]
                                        <unaryExp>[
                                          <factor>[
                                            <immutable>[
                                              <constant>[
                                                2
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                      <mulop>[
                                        /
                                      ]
                                      <unaryExp>[
                                        <factor>[
                                          <immutable>[
                                            <constant>[
                                              4
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                  <sumop>[
                                    +
                                  ]
                                  <mulExp>[
                                    <unaryExp>[
                                      <factor>[
                                        <immutable>[
                                          (
                                          <exp>[
                                            <simpleExp>[
                                              <andExp>[
                                                <unaryRelExp>[
                                                  <relExp>[
                                                    <sumExp>[
                                                      <mulExp>[
                                                        <mulExp>[
                                                          <unaryExp>[
                                                            <unaryop>[
                                                              -
                                                            ]
                                                            <unaryExp>[
                                                              <factor>[
                                                                <immutable>[
                                                                  <constant>[
                                                                    2
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                        <mulop>[
                                                          /
                                                        ]
                                                        <unaryExp>[
                                                          <factor>[
                                                            <immutable>[
                                                              <constant>[
                                                                2
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                          )
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                    ;
                  ]
                ]
              ]
              <stmt>[
                <iterStmt>[
                  while
                  (
                  <simpleExp>[
                    <andExp>[
                      <unaryRelExp>[
                        <relExp>[
                          <sumExp>[
                            <mulExp>[
                              <unaryExp>[
                                <factor>[
                                  <mutable>[
                                    a
                                  ]
                                ]
                              ]
                            ]
                          ]
                          <relop>[
                            >=
                          ]
                          <sumExp>[
                            <mulExp>[
                              <unaryExp>[
                                <factor>[
                                  <immutable>[
                                    <constant>[
                                      0
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                  )
                  <stmt>[
                    <compoundStmt>[
                      {
                      <localDecls>
                      <stmtList>[
                        <stmtList>[
                          <stmtList>[
                            <stmtList>
                            <stmt>[
                              <expStmt>[
                                <exp>[
                                  <mutable>[
                                    b
                                  ]
                                  <assignop>[
                                    =
                                  ]
                                  <exp>[
                                    <simpleExp>[
                                      <andExp>[
                                        <unaryRelExp>[
                                          <relExp>[
                                            <sumExp>[
                                              <sumExp>[
                                                <mulExp>[
                                                  <unaryExp>[
                                                    <factor>[
                                                      <mutable>[
                                                        b
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                              <sumop>[
                                                +
                                              ]
                                              <mulExp>[
                                                <unaryExp>[
                                                  <factor>[
                                                    <immutable>[
                                                      <constant>[
                                                        1
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                                ;
                              ]
                            ]
                          ]
                          <stmt>[
                            <expStmt>[
                              <exp>[
                                <mutable>[
                                  c
                                ]
                                <assignop>[
                                  =
                                ]
                                <exp>[
                                  <simpleExp>[
                                    <andExp>[
                                      <unaryRelExp>[
                                        <relExp>[
                                          <sumExp>[
                                            <mulExp>[
                                              <mulExp>[
                                                <unaryExp>[
                                                  <factor>[
                                                    <mutable>[
                                                      c
                                                    ]
                                                  ]
                                                ]
                                              ]
                                              <mulop>[
                                                *
                                              ]
                                              <unaryExp>[
                                                <factor>[
                                                  <mutable>[
                                                    b
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                              ;
                            ]
                          ]
                        ]
                        <stmt>[
                          <expStmt>[
                            <exp>[
                              <mutable>[
                                a
                              ]
                              <assignop>[
                                =
                              ]
                              <exp>[
                                <simpleExp>[
                                  <andExp>[
                                    <unaryRelExp>[
                                      <relExp>[
                                        <sumExp>[
                                          <sumExp>[
                                            <mulExp>[
                                              <unaryExp>[
                                                <factor>[
                                                  <mutable>[
                                                    a
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                          <sumop>[
                                            -
                                          ]
                                          <mulExp>[
                                            <unaryExp>[
                                              <factor>[
                                                <immutable>[
                                                  <constant>[
                                                    1
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                            ;
                          ]
                        ]
                      ]
                      }
                    ]
                  ]
                ]
              ]
            ]
            <stmt>[
              <returnStmt>[
                return
                <exp>[
                  <simpleExp>[
                    <andExp>[
                      <unaryRelExp>[
                        <relExp>[
                          <sumExp>[
                            <sumExp>[
                              <sumExp>[
                                <mulExp>[
                                  <unaryExp>[
                                    <factor>[
                                      <mutable>[
                                        a
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                              <sumop>[
                                +
                              ]
                              <mulExp>[
                                <unaryExp>[
                                  <factor>[
                                    <mutable>[
                                      b
                                    ]
                                  ]
                                ]
                              ]
                            ]
                            <sumop>[
                              +
                            ]
                            <mulExp>[
                              <unaryExp>[
                                <factor>[
                                  <mutable>[
                                    c
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
                ;
              ]
            ]
          ]
          }
        ]
      ]
    ]
  ]
]
